<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>malloc47</title>
  <link href="https://www.malloc47.com"/>
  <link type="application/atom+xml" rel="self" href="https://www.malloc47.com/atom.xml"/>
  <updated>2022-05-24T02:17:53Z</updated>
  <id>https://www.malloc47.com/</id>
  <author>
    <name>Jarrell Waggoner</name>
    <email>malloc47@gmail.com</email>
  </author>
  
  <entry>
    <id>https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript-part-3/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript-part-3/"/>
    <title>Building a Personal Dashboard in ClojureScript Part 3</title>
    <updated>2022-05-24T02:17:53Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;My raison d&amp;apos;Ãªtre for creating the wall-mounted dashboard discussed in
&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;previous&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;posts&amp;lt;/a&amp;gt; was to
help with timing my transit connections when leaving my NYC
apartment. After living on my block for a few months, I had worked out
the perfect time to step out the door to make a subway, bus, or ferry
connection, but quickly grew tired of having to pull out my phone to
verify the transit time. I basically wanted an equivalent of the
&amp;lt;a href=&amp;quot;https://mta.info/&amp;quot;&amp;gt;MTA&amp;lt;/a&amp;gt; transit time boards found in most subway stations, customized
with my local stations.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Jumping straight to a sample of the end result, I wanted a dashboard
like this:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/transit.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/transit.png&amp;quot; alt=&amp;quot;Sample transit card&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Building this view, however, is less simple than it sounds. A big part
of the complexity is in finding and consuming a source for the transit
departure times. Unlike the &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;weather card&amp;lt;/a&amp;gt;,
there isn&amp;apos;t a single, free, purpose-built API to serve such
dashboards. To deal with transit, we have to solve two main
challenges:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Finding a source for the transit data we need to display on the
dashboard.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Consuming transit data from the above source, stitching it together
to populate the view.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;For narrative reasons, we&amp;apos;ll take these points in reverse order before
delving into the implementation.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;consuming-transit-data&amp;quot;&amp;gt;Consuming Transit Data&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;The most common way to address (2) is by consuming a source that
adheres to the &amp;lt;a href=&amp;quot;https://developers.google.com/transit&amp;quot;&amp;gt;GTFS&amp;lt;/a&amp;gt; (General Transit Feed Specification), the
defacto standard for transit data that is published by many transit
agencies. It has complementary &amp;lt;a href=&amp;quot;https://developers.google.com/transit/gtfs&amp;quot;&amp;gt;static&amp;lt;/a&amp;gt; and
&amp;lt;a href=&amp;quot;https://developers.google.com/transit/gtfs-realtime&amp;quot;&amp;gt;realtime&amp;lt;/a&amp;gt; flavors, and we need both sources to get the
most accurate data for our dashboard.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To better understand the complexity of GTFS, this is a (very rough)
entity relationship diagram:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/gtfs-erd.svg&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/gtfs-erd.svg&amp;quot; alt=&amp;quot;GTFS ERD&amp;quot; width=&amp;quot;600&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Note that there are &amp;lt;a href=&amp;quot;https://web.archive.org/web/20130117174415/http://www.dft.gov.uk/transmodel/schema/doc/GoogleTransit/TransmodelForGoogle-09.pdf&amp;quot;&amp;gt;other similar ERDs&amp;lt;/a&amp;gt; that are
likely better-researched but didn&amp;apos;t fit quite as nealy into this post
so I took a stab at creating this diagram myself. There are a few
caveats in the image above: There are a lot of conditional
relationships in GTFS that are not captured in this image; similarly,
there are also a number of nested entities in the realtime spec that
are glossed over in this diagram for simplicity.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;GTFS is quite normalized so there isn&amp;apos;t an obvious self-contained
single entity we can read that will let us drive everything in our
dashboard.  Combing through the GTFS entities, there is a sizable
number that are not relevant to displaying transit times at a chosen
station. Removing entities related to fare calculation, pathing,
language translation, station layout, and so forth, the resulting
trimmed-down ERD looks like:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/gtfs-erd-small.svg&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/gtfs-erd-small.svg&amp;quot; alt=&amp;quot;GTFS ERD Small&amp;quot; width=&amp;quot;300&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;This subset of the GTFS is a bit more manageable for demonstrating
what we need to consume for our dashboard. The particular relevant
subset might be different for other agencies (e.g., some agencies
might rely more on &amp;lt;code&amp;gt;frequency&amp;lt;/code&amp;gt;-based service or have &amp;lt;code&amp;gt;calendar&amp;lt;/code&amp;gt;-based
service changes) but this is all I needed based on the &amp;lt;a href=&amp;quot;https://mta.info/&amp;quot;&amp;gt;MTA&amp;lt;/a&amp;gt; GTFS.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Exploring this subset in more detail, the &amp;lt;code&amp;gt;agency&amp;lt;/code&amp;gt; entity isn&amp;apos;t
strictly necessary except in cases where the feed represents multiple
agencies. To populate the dashboard, we will identify one or more
&amp;lt;code&amp;gt;stops&amp;lt;/code&amp;gt;, use these stops to filter the &amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; list which allows
us to compute the arrival times at a given stop. This would be
sufficient for our dashboard if there&amp;apos;s a single transit line going in
a single direction at a given stop. However, if there&amp;apos;s multiple
routes or directions of travel at a particular stop then we need to
split the &amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; into groups by direction and route to
differentiate them. To accomplish this, we additionally look up the
&amp;lt;code&amp;gt;trip&amp;lt;/code&amp;gt; for each &amp;lt;code&amp;gt;stop time&amp;lt;/code&amp;gt; which gives us information about the trip
direction, and then walk through &amp;lt;code&amp;gt;trips&amp;lt;/code&amp;gt; to &amp;lt;code&amp;gt;routes&amp;lt;/code&amp;gt; which allows us
bucket the &amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; into groups by route.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So far, we&amp;apos;ve only touched the entities in the static GTFS, which is
sufficient if the agency consistency runs on time (ðŸ¤£). To bring the
prescheduled &amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; into alignment with reality, we read the
&amp;lt;code&amp;gt;trip updates&amp;lt;/code&amp;gt; Realtime source and (hand-waving a lot here) update the
&amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; with these realtime updates at a reasonable interval.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;At a high-level, this is our roadmap for reading the subset of the
GTFS that we need for this dashboard.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;serving-transit-data&amp;quot;&amp;gt;Serving Transit Data&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Stepping backwards to address point (1) above, we need to talk about
how we physically convey GTFS data into our web application. The
static portion of the GTFS is a zip file containing &amp;lt;code&amp;gt;.txt&amp;lt;/code&amp;gt; files
(effectively CSV formatted)--not impossible to download directly from
the transit agency into a web application with the right
&amp;lt;a href=&amp;quot;https://gildas-lormeau.github.io/zip.js/&amp;quot;&amp;gt;decompression&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;https://www.papaparse.com/&amp;quot;&amp;gt;parsing&amp;lt;/a&amp;gt; libraries, but hardly
idiomatic. The GTFS Realtime format is even more challenging as it is
serialized as a &amp;lt;a href=&amp;quot;https://developers.google.com/protocol-buffers&amp;quot;&amp;gt;Protocol Buffer&amp;lt;/a&amp;gt;. It &amp;lt;em&amp;gt;might&amp;lt;/em&amp;gt; be theoretically
possible to consume the realtime ProtoBuf stream by providing the
&amp;lt;code&amp;gt;.proto&amp;lt;/code&amp;gt; file to the browser and using a &amp;lt;a href=&amp;quot;https://github.com/mapbox/pbf&amp;quot;&amp;gt;ProtoBuf javascript
decoder&amp;lt;/a&amp;gt;; in practice, the real-time updates from the &amp;lt;a href=&amp;quot;https://api.mta.info/&amp;quot;&amp;gt;MTA&amp;lt;/a&amp;gt; are megabytes-to-gigabytes and are updated frequently enough
that I had concerns as to whether a cheap, wall-mounted tablet would
be able to handle parsing the feeds in-browser at a reasonable
frequency.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Thankfully, there are multiple server-side options available which
vary in quality, completeness, and implementation language. Choosing a
minimal GTFS server could absolutely work for this use case, but I
ultimately ended up gravitating towards the &amp;lt;a href=&amp;quot;https://www.opentripplanner.org/&amp;quot;&amp;gt;Open Trip Planner&amp;lt;/a&amp;gt;
(OTP) project which specializes in route planning (including surface
street connections using &amp;lt;a href=&amp;quot;https://www.openstreetmap.org/&amp;quot;&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt;). Not only does OTP consume
GTFS (both static and realtime) for use in its route planning, it
caches the serialized results for faster reloading, has a fetching
mechanism to pull the feeds in at a regular cadence, and--most
importantly for our intended application--has an &amp;lt;a href=&amp;quot;http://dev.opentripplanner.org/apidoc/1.0.0/resource_IndexAPI.html&amp;quot;&amp;gt;Index API&amp;lt;/a&amp;gt; which
provides a REST interface to query GTFS entities. Even better, it is
becoming increasingly common for transit agencies themselves to host
an OTP instance for their route planning or transit time needs--if
such an instance is public-facing, using it saves a lot of work
configuring and hosting our own OTP instance.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The discussion from the previous section roughly translates to the
following Clojure pseudocode to walk through the GTFS entities and
collect a useful payload:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn stop-times
  [stop-id]
  (-&amp;amp;gt;&amp;amp;gt; stop-id
       fetch-stop
       fetch-stop-times
       (map (fn [stop-time]
              (let [trip  (fetch-trip (:trip-id stop-time))
                    route (fetch-route (:route-id trip))]
                (assoc stop-time
                       :route route
                       :direction (:direction trip)))))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Following this, we can &amp;lt;code&amp;gt;concat&amp;lt;/code&amp;gt; all the &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt; from all the
&amp;lt;code&amp;gt;stop-id&amp;lt;/code&amp;gt;s together and do a &amp;lt;code&amp;gt;(group-by #(select-keys % [:direction :route]))&amp;lt;/code&amp;gt; to bundle them into the rows displayed in the dashboard.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;From the &amp;lt;a href=&amp;quot;http://dev.opentripplanner.org/apidoc/1.0.0/resource_IndexAPI.html&amp;quot;&amp;gt;Index API&amp;lt;/a&amp;gt;, the following endpoints look promising to meet
these needs:&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;stop&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;/index/stops/{stop-id}&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;stop times&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;/index/stops/{stop-id}/stoptimes&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;trip&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;/index/trips/{trip-id}&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;route&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;code&amp;gt;/index/routes/{route-id}&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;p&amp;gt;As it turns out, the Index API is able to flatten the &amp;lt;code&amp;gt;trip&amp;lt;/code&amp;gt; into the
&amp;lt;code&amp;gt;stop&amp;lt;/code&amp;gt; entity (&amp;lt;code&amp;gt;/index/stops/{stop-id}&amp;lt;/code&amp;gt;) for us in the scenario where
the stop services a single line + direction. This does not initially
sound like a very useful optimization for more complex transit systems
that routinely have multiple routes traveling multiple directions that
stop at the same station. However, in the case of the MTA&amp;apos;s GTFS, the
agency choose to model stations hierarchically, where the main station
is the parent stop and different lines+directions are child stops
within the same overall station. The Index API also directly adds the
&amp;lt;code&amp;gt;route-id&amp;lt;/code&amp;gt; to the individual &amp;lt;code&amp;gt;stop times&amp;lt;/code&amp;gt; (i.e., it traverses the
&amp;lt;code&amp;gt;stop-time -&amp;amp;gt; trip&amp;lt;/code&amp;gt; entities for us). Thus by choosing these &amp;amp;quot;child&amp;amp;quot;
stops that represent a single line + direction, we can save having to
make the additional &amp;lt;code&amp;gt;trip&amp;lt;/code&amp;gt; call to get the direction + route ID. Under
this optimization assumption we get an even trimmer effective ERD:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/cockpit/gtfs-erd-smaller.svg&amp;quot;&amp;gt; &amp;lt;img
  src=&amp;quot;/img/posts/cockpit/gtfs-erd-smaller.svg&amp;quot; alt=&amp;quot;GTFS ERD Smaller&amp;quot;
  width=&amp;quot;300&amp;quot; /&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Depending on your particular agency, this optimization may not be
applicable or might be overkill if you&amp;apos;re hosting your own OTP and
don&amp;apos;t have any concerns about the number of API queries. If
self-hosting, this might be a good candidate for the &amp;lt;a href=&amp;quot;https://samnewman.io/patterns/architectural/bff/&amp;quot;&amp;gt;BFF&amp;lt;/a&amp;gt; pattern,
but the rest of this post assumes a preexisting OTP instance without
any extra server-side components on top of it.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;implementation&amp;quot;&amp;gt;Implementation&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Now that we&amp;apos;ve settled on the physical API to use and know the
relationships among the entities we need for our dashboard, all we
have left is to code and style it. Rather than go line-by-line as in
previous installments, I&amp;apos;ll only be going over the highlights of the
&amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/d4badb7e652014693574063806a8ccda27d9fa36/src/cljs/cockpit/transit.cljs&amp;quot;&amp;gt;source code&amp;lt;/a&amp;gt; in this section.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;As with other external APIs we need to hit, we use
&amp;lt;a href=&amp;quot;https://github.com/day8/re-frame-http-fx&amp;quot;&amp;gt;re-frame-http-fx&amp;lt;/a&amp;gt; for defining the &amp;amp;quot;effect handlers&amp;amp;quot; that made the
side-effecting REST calls. An example where we fetch the &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt;
(assumes that the &amp;lt;code&amp;gt;stop&amp;lt;/code&amp;gt; has already been fetched and is passed as
input):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-event-fx
 ::fetch-stop-times
 (fn [_ [_ {:keys [stop-id] :as stop}]]
   {:http-xhrio
    (merge
     otp-request
     {:uri        (str config/otp-uri
                       &amp;amp;quot;/routers/default/index/stops/&amp;amp;quot;
                       stop-id
                       &amp;amp;quot;/stoptimes&amp;amp;quot;)
      :on-success [::persist-stop-times [:transit :stop-times stop]]
      :on-failure [::events/http-fail [:transit :stop-times stop]]})}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The notable part of this effect handler is the &amp;lt;code&amp;gt;::persist-stop-times&amp;lt;/code&amp;gt;
event which is dispatched when the effect handler is successful. The
&amp;lt;code&amp;gt;::persist-stop-times&amp;lt;/code&amp;gt; event is, itself an effect handler that
persists the &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt; API payload into the &amp;lt;code&amp;gt;re-frame.db/app-db&amp;lt;/code&amp;gt;
while also fanning out (&amp;lt;code&amp;gt;:dispatch-n&amp;lt;/code&amp;gt;) to trigger &amp;lt;code&amp;gt;::fetch-route&amp;lt;/code&amp;gt;
events for all the new &amp;lt;code&amp;gt;route-ids&amp;lt;/code&amp;gt; that it finds:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-event-fx
 ::persist-stop-times
 (fn [{:keys [db]} [_ key-path stop-times]]
   (let [existing-route-ids (-&amp;amp;gt; db :transit :routes keys set)
         new-route-ids      (-&amp;amp;gt;&amp;amp;gt; stop-times :route :id set)
         ;; diff what is in the DB with the newly-seen routes so we
         ;; only fetch them once
         route-ids          (-&amp;amp;gt;&amp;amp;gt; (difference new-route-ids
                                             existing-route-ids)
                                 (remove nil?))
         stop-id            (-&amp;amp;gt; key-path last :stop-id)]
     {:db         (assoc-in db key-path stop-times)
      ;; fire requests for the routes listed in the payload
      :dispatch-n (map (fn [route-id]
                         [::fetch-route route-id])
                       route-ids)})))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The route-fetching events are fired after fetching the stop times
because the routes that serve a particular stop might change at any
given point so we don&amp;apos;t necessarily know all the routes ahead of time.
And it would be better not to have to preemptively fetch every route
in the system, particularly for larger agencies like the MTA. We also
want to avoid re-fetching the same routes over and over again, so
&amp;lt;code&amp;gt;route-ids&amp;lt;/code&amp;gt; that are already present in the &amp;lt;code&amp;gt;app-db&amp;lt;/code&amp;gt; are not fetched
again to minimize API queries, effectively treating the &amp;lt;code&amp;gt;app-db&amp;lt;/code&amp;gt; as a
cache.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;How the &amp;lt;code&amp;gt;stop&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;route&amp;lt;/code&amp;gt; entities are persisted is less interesting
so I&amp;apos;m omitting examples of them here. Just like the &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;weather
API&amp;lt;/a&amp;gt; prior, we now need only to &amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/d4badb7e652014693574063806a8ccda27d9fa36/src/cljs/cockpit/polling.cljs#L27-L37&amp;quot;&amp;gt;poll the
transit
API&amp;lt;/a&amp;gt;
at regular intervals to make sure our &amp;lt;code&amp;gt;app-db&amp;lt;/code&amp;gt; always has fresh
information ready for display.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Like other re-frame applications, now that we have our events defined
we need to create subscriptions on the resulting &amp;lt;code&amp;gt;app-db&amp;lt;/code&amp;gt; changes to
turn these raw OTP Index API payloads into a processed form ready to
be used by our view. Our &amp;amp;quot;Level 1&amp;amp;quot; subscriptions are fairly simple:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::stop-times-raw
 (fn [db _]
   (-&amp;amp;gt; db :transit :stop-times)))
;;; Repeat for stops and routes...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which fetches the raw API payload for the &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt;, which looks
something like this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;[{:route {:id &amp;amp;quot;MTASBWY:1&amp;amp;quot;}
  :times
  [{:departureDelay     0
    :stopName           &amp;amp;quot;South Ferry&amp;amp;quot;
    :scheduledDeparture 89130
    :stopId             &amp;amp;quot;MTASBWY:142N&amp;amp;quot;
    :directionId        &amp;amp;quot;0&amp;amp;quot;
    :serviceDay         1592539200
    :tripId             &amp;amp;quot;MTASBWY:5953&amp;amp;quot;
    :realtimeDeparture  89130
    :stopHeadsign       &amp;amp;quot;Uptown &amp;amp;amp; The Bronx&amp;amp;quot;
    :tripHeadsign       &amp;amp;quot;Van Cortlandt Park - 242 St&amp;amp;quot;}]
    ...}
 ...]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Note the &amp;lt;code&amp;gt;realtimeDeparture&amp;lt;/code&amp;gt; field which is updated by OTP with the
GTFS Realtime source.  This payload goes through a cleanup
subscription that grabs specific keys from the payload, places them
into a flattened data structure, and converts the fixed departure
timestamp into a &amp;amp;quot;minutes from now&amp;amp;quot; format that we&amp;apos;ll want in our
view:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::stop-times
 :&amp;amp;lt;- [::stop-times-raw]
 :&amp;amp;lt;- [::clock/clock]
 (fn [[stop-times clock] _]
   (let [now (time-coerce/from-date clock)]
     (-&amp;amp;gt;&amp;amp;gt; stop-times
          vals
          (apply concat)
          (mapcat
           (fn [{:keys [times route]}]
             (-&amp;amp;gt;&amp;amp;gt; times
                  (map #(assoc % :route route))
                  (map
                   (fn [{time           :realtimeDeparture
                         day            :serviceDay
                         stop-id        :stopId
                         {route-id :id} :route
                         direction-id   :directionId}]
                     {:minutes        (-&amp;amp;gt; time (+ day) (* 1e3)
                                          time-coerce/from-long
                                          (-&amp;amp;gt;&amp;amp;gt; (safe-interval now))
                                          time/in-seconds
                                          (/ 60)
                                          js/Math.ceil)
                      :stop-id        stop-id
                      :route-id       route-id
                      :direction-id   direction-id})))))))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This subscription code is detailed and has some assorted helpers
(&amp;lt;code&amp;gt;safe-interval&amp;lt;/code&amp;gt;, the &amp;lt;code&amp;gt;cljs-time&amp;lt;/code&amp;gt; namespaces) that are significant but
not worth a tangent right now. As before, I&amp;apos;m also omitting similar
cleanup subscriptions for the &amp;lt;code&amp;gt;stop&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;route&amp;lt;/code&amp;gt; payloads.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Finally, we join all three of &amp;lt;code&amp;gt;stops&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;routes&amp;lt;/code&amp;gt;
together with a 3rd-level subscription:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::stop-times-processed
 :&amp;amp;lt;- [::stop-times]
 :&amp;amp;lt;- [::routes]
 :&amp;amp;lt;- [::stops]
 (fn [[stop-times routes stops] _]
   (-&amp;amp;gt;&amp;amp;gt; stop-times
        (filter (-&amp;amp;gt; (every-pred nat-int? (partial &amp;amp;gt; 60))
                    (comp :minutes)))
        (map (fn [{:keys [stop-id route-id] :as stop-time}]
               (-&amp;amp;gt; stop-time
                   (assoc :stop (get stops stop-id))
                   (assoc :route (get routes route-id)))))
        ;; Make this an inner join
        (filter (every-pred :stop :route))
        ;; Group by stop only
        (group-by #(select-keys % [:stop]))
        ;; Add route to key after grouping to keep routes together
        (map (fn [[k v]]
               [(assoc k :route (roll-up-route v))
                v]))
        (into {})
        (map-vals #(-&amp;amp;gt;&amp;amp;gt; %
                        (filter
                         (fn [{:keys [direction-id]
                               {stop-direction-id :direction-id} :stop}]
                           (or
                            (= direction-id stop-direction-id)
                            (nil? stop-direction-id))))
                        (sort-by :minutes)
                        (take 4)))
        (sort-by (juxt (comp :sort-override :stop first)
                       (comp :sort-order :route first)
                       (comp :stop-id :stop first))))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This is a &amp;lt;em&amp;gt;lot&amp;lt;/em&amp;gt; to unpack, especially compared with the pseudocode
above (which probably means this code needs some refactoring into more
subscriptions); out of laziness, I&amp;apos;ll just summarize the highlights:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Keep only &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt; that are less than 60 minutes out&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;The &amp;lt;code&amp;gt;stop&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;route&amp;lt;/code&amp;gt; are attached to the &amp;lt;code&amp;gt;stop-time&amp;lt;/code&amp;gt; with an inner
join&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Group all &amp;lt;code&amp;gt;stop-times&amp;lt;/code&amp;gt; by the different &amp;lt;code&amp;gt;stops&amp;lt;/code&amp;gt; they represent&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Do a &amp;amp;quot;roll up&amp;amp;quot; of all the routes attached to the stop times inside
of each group with the &amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/d4badb7e652014693574063806a8ccda27d9fa36/src/cljs/cockpit/transit.cljs#L233-L256&amp;quot;&amp;gt;&amp;lt;code&amp;gt;roll-up-route&amp;lt;/code&amp;gt;
function&amp;lt;/a&amp;gt;,
which lets us show a stop, say
&amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Lexington_Avenue%E2%80%9363rd_Street_station&amp;quot;&amp;gt;Lex/63rd&amp;lt;/a&amp;gt;,
as a single row labeled &amp;amp;quot;F/Q&amp;amp;quot; rather than having separate rows for
the F and Q lines. This is typically more useful for express lines
or other situations where you care only about the latest departure
but don&amp;apos;t care about the particular line.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Filter out mislabeled stop times going the wrong direction at a stop&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Sort the stop times in each group in ascending order&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Take the first four stop-times in each group to show in the view&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Sort the groups themselves&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;We now have a stable, easy-to-consume set of groups corresponding to
all the stops we care about, each with up to four upcoming departure
times in minutes.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This payload is subsequently rendered in the view. Recall that we want
a series of rows in our view that look like:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/cockpit/transit-row.png&amp;quot;&amp;gt; &amp;lt;img
  src=&amp;quot;/img/posts/cockpit/transit-row.png&amp;quot; alt=&amp;quot;Transit row&amp;quot;
  width=&amp;quot;300&amp;quot; /&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;where the arrow specifies the direction of travel, the round symbol
specifies the particular route name, and the stop times fan out to the
right. This is rendered with:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn transit []
  [:&amp;amp;gt; Card {:height &amp;amp;quot;48vh&amp;amp;quot;}
   [:&amp;amp;gt; CardContent
    [:&amp;amp;gt; Grid {:container true :spacing 1 :alignItems &amp;amp;quot;center&amp;amp;quot;}
     (map
      (fn [[{{:keys [color text-color short-name route-id]} :route
             {:keys [direction-id stop-id]} :stop}
            stop-times]]
        ;; Since this element is being dynamically generated, must
        ;; specify key so React can do its reconcilliation
        [:&amp;amp;lt;&amp;amp;gt; {:key (str stop-id &amp;amp;quot;-&amp;amp;quot; route-id)}

         ;; Arrow pointing up or down corresponding to the direction
         [:&amp;amp;gt; Grid {:item true :xs 1}
          [:&amp;amp;gt; Typography {:variant &amp;amp;quot;h4&amp;amp;quot; :color &amp;amp;quot;textSecondary&amp;amp;quot;}
           (get direction-id-&amp;amp;gt;arrow direction-id &amp;amp;quot;&amp;amp;quot;)]]

         ;; Line symbol that takes its color directly from the
         ;; transit agency&amp;apos;s route metadata
         [:&amp;amp;gt; Grid {:item true :xs 2}
          [:&amp;amp;gt; Avatar {:style {:background-color (str &amp;amp;quot;#&amp;amp;quot; color)
                              :color (str &amp;amp;quot;#&amp;amp;quot; text-color)}}
           short-name]]

         ;; Render the stop
         (-&amp;amp;gt;&amp;amp;gt; (concat stop-times (repeat nil))
              (map-indexed
               (fn [idx {:keys [minutes] :as stop-time}]
                 [:&amp;amp;lt;&amp;amp;gt; {:key idx}
                  [:&amp;amp;gt; Grid {:item true :xs 2}
                   (when stop-time
                     [:&amp;amp;gt; Typography
                      [:span
                       (if (&amp;amp;gt; minutes 0)
                         [:&amp;amp;lt;&amp;amp;gt; minutes [:span &amp;amp;quot;m &amp;amp;quot;]]
                         &amp;amp;quot;Now &amp;amp;quot;)]])]]))
              (take 4))

         [:&amp;amp;gt; Grid {:item true :xs 1}]])
      @(re-frame/subscribe [::transit/stop-times-processed]))]]])
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This is another beast of a function (and I omitted some styling just
to trim it down this small), but broken down is not too complicated:
The outer &amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt; generates a row where each row consists of the up/down
arrow and a circular &amp;lt;code&amp;gt;Avatar&amp;lt;/code&amp;gt; symbol with the line &amp;lt;code&amp;gt;short-name&amp;lt;/code&amp;gt; to
display the route. The inner &amp;lt;code&amp;gt;map-indexed&amp;lt;/code&amp;gt; generates exactly 4 stop
times (or empty &amp;lt;code&amp;gt;Grid&amp;lt;/code&amp;gt; items to pad out the grid).&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;conclusion&amp;quot;&amp;gt;Conclusion&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Since this the final post in the series, I would be remiss not to
include some photos of the finished product:&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/cockpit/wall1.jpg&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;/img/posts/cockpit/wall1.jpg&amp;quot; alt=&amp;quot;Wall-mounted dashboard&amp;quot; height=&amp;quot;250&amp;quot; /&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/cockpit/wall2.jpg&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;/img/posts/cockpit/wall2.jpg&amp;quot; alt=&amp;quot;Wall-mounted dashboard with door&amp;quot; height=&amp;quot;250&amp;quot; /&amp;gt; &amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;p&amp;gt;Differing slightly from the &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;first installment&amp;lt;/a&amp;gt;, I&amp;apos;ve since replaced
the stock chart in the lower right with a webcam view from &amp;lt;a href=&amp;quot;https://nyc.gov/dot&amp;quot;&amp;gt;NYC DOT&amp;lt;/a&amp;gt;
but kept the appearance otherwise unchanged.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The dashboard is displayed on an inexpensive, previous-generation
&amp;lt;a href=&amp;quot;https://www.amazon.com/Fire-HD-8-Previous-Generation-9th/dp/B0794RHPZD&amp;quot;&amp;gt;Amazon Fire 8&amp;lt;/a&amp;gt; using the &amp;lt;a href=&amp;quot;https://github.com/thanksmister/wallpanel-android&amp;quot;&amp;gt;WallPanel&amp;lt;/a&amp;gt; app (having switched away
from &amp;lt;a href=&amp;quot;https://www.fully-kiosk.com/&amp;quot;&amp;gt;Fully Kiosk&amp;lt;/a&amp;gt; for this open-source option) to keep the
ClojureScript SPA running continually. To physically affix the tablet
to the wall, I purchased a &amp;lt;a href=&amp;quot;https://www.amazon.com/gp/product/B01BX5YWF4/&amp;quot;&amp;gt;tablet wall mount&amp;lt;/a&amp;gt; which adheres using
Command Strips. A wall-colored Micro USB cable to keep the tablet
charged completes the installation.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So far, this setup has been working well. There are some minor
annoyances with the hardware: This particular Fire tablet does not
make ambient light adjustments to the screen brightness so it lightens
my living room considerably at night. Given that this tablet is a full
order of magnitude cheaper than the premium tablet options, it has
been more than sufficient for this purpose and I won&amp;apos;t be overly upset
by battery or screen burn-in issues long-term.&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;Part 1&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;Part 2&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Part 3&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript-part-2/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript-part-2/"/>
    <title>Building a Personal Dashboard in ClojureScript Part 2</title>
    <updated>2021-09-13T02:19:36Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Following the &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;previous installment&amp;lt;/a&amp;gt; in my series on building a
dashboard in ClojureScript, I&amp;apos;ll be diving into the weather card.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/weather.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/weather.png&amp;quot; alt=&amp;quot;Weather card&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Like any re-frame application, this comes in two major pieces:
consuming from the API to update the application state, and rendering
the state on the page. Before showing how this is wired up, however,
let&amp;apos;s first dive into the external weather API itself.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;weather-api&amp;quot;&amp;gt;Weather API&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;There are several different weather APIs with a free tier that can
handle the minimal traffic of a single dashboard. I landed on &amp;lt;a href=&amp;quot;https://openweathermap.org/api&amp;quot;&amp;gt;Open
Weather Map API&amp;lt;/a&amp;gt;, which has both a free tier and an easy-to-use &amp;lt;a href=&amp;quot;https://openweathermap.org/api/one-call-api&amp;quot;&amp;gt;one
call endpoint&amp;lt;/a&amp;gt; containing all the weather granularity (current and
day/hour/minute-level) needed for a reasonable dashboard.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;A sample request (with lots of fields omitted):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;&amp;amp;gt; curl &amp;apos;http://api.openweathermap.org/data/2.5/onecall?lat=&amp;amp;lt;latitude&amp;amp;gt;&amp;amp;amp;lon=&amp;amp;lt;longitude&amp;amp;gt;&amp;amp;amp;units=imperial&amp;amp;amp;appid=&amp;amp;lt;apikey&amp;amp;gt;&amp;apos; | jq .

{
  &amp;amp;quot;current&amp;amp;quot;: {
    &amp;amp;quot;dt&amp;amp;quot;: 1625517908,
    &amp;amp;quot;sunrise&amp;amp;quot;: 1625477417,
    &amp;amp;quot;sunset&amp;amp;quot;: 1625531408,
    &amp;amp;quot;temp&amp;amp;quot;: 82.31,
    &amp;amp;quot;feels_like&amp;amp;quot;: 84.31,
    &amp;amp;quot;pressure&amp;amp;quot;: 1017,
    &amp;amp;quot;humidity&amp;amp;quot;: 57,
    &amp;amp;quot;weather&amp;amp;quot;: [
      {
        &amp;amp;quot;id&amp;amp;quot;: 800,
        &amp;amp;quot;main&amp;amp;quot;: &amp;amp;quot;Clear&amp;amp;quot;,
        &amp;amp;quot;description&amp;amp;quot;: &amp;amp;quot;clear sky&amp;amp;quot;,
        &amp;amp;quot;icon&amp;amp;quot;: &amp;amp;quot;01d&amp;amp;quot;
      }
    ]
    ...
  },
  &amp;amp;quot;daily&amp;amp;quot;: [
    {
      &amp;amp;quot;dt&amp;amp;quot;: 1625504400,
      &amp;amp;quot;sunrise&amp;amp;quot;: 1625477417,
      &amp;amp;quot;sunset&amp;amp;quot;: 1625531408,
      &amp;amp;quot;temp&amp;amp;quot;: {
        &amp;amp;quot;day&amp;amp;quot;: 83.12,
        &amp;amp;quot;min&amp;amp;quot;: 66.2,
        &amp;amp;quot;max&amp;amp;quot;: 83.82,
        &amp;amp;quot;night&amp;amp;quot;: 75.74,
        &amp;amp;quot;eve&amp;amp;quot;: 81.82,
        &amp;amp;quot;morn&amp;amp;quot;: 67.89
      },
      &amp;amp;quot;feels_like&amp;amp;quot;: {
        &amp;amp;quot;day&amp;amp;quot;: 83.86,
        &amp;amp;quot;night&amp;amp;quot;: 76.21,
        &amp;amp;quot;eve&amp;amp;quot;: 83.5,
        &amp;amp;quot;morn&amp;amp;quot;: 68.29
      },
      &amp;amp;quot;humidity&amp;amp;quot;: 49,
      &amp;amp;quot;weather&amp;amp;quot;: [
        {
          &amp;amp;quot;id&amp;amp;quot;: 500,
          &amp;amp;quot;main&amp;amp;quot;: &amp;amp;quot;Rain&amp;amp;quot;,
          &amp;amp;quot;description&amp;amp;quot;: &amp;amp;quot;light rain&amp;amp;quot;,
          &amp;amp;quot;icon&amp;amp;quot;: &amp;amp;quot;10d&amp;amp;quot;
        }
      ],
      &amp;amp;quot;rain&amp;amp;quot;: 0.53,
      ...
    },
    ...
  ],
  &amp;amp;quot;minutely&amp;amp;quot;: [...],
  &amp;amp;quot;hourly&amp;amp;quot;: [...],
  &amp;amp;quot;alerts&amp;amp;quot;: [...]
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;In addition, we&amp;apos;ll want to tie the payload to a set of weather icons
supplied by the &amp;lt;a href=&amp;quot;https://erikflowers.github.io/weather-icons/&amp;quot;&amp;gt;Weather Icons&amp;lt;/a&amp;gt; font together using this &amp;lt;a href=&amp;quot;https://github.com/erikflowers/weather-icons/issues/204&amp;quot;&amp;gt;mapping&amp;lt;/a&amp;gt;
(represented below as &amp;lt;code&amp;gt;id-&amp;amp;gt;icon&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;api-client&amp;quot;&amp;gt;API Client&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;In re-frame parlance, we use an &amp;amp;quot;effects handler&amp;amp;quot; to make http calls,
which is helpfully provided by &amp;lt;a href=&amp;quot;https://github.com/day8/re-frame-http-fx&amp;quot;&amp;gt;re-frame-http-fx&amp;lt;/a&amp;gt;. This allows us to
define a &amp;lt;code&amp;gt;::fetch-weather&amp;lt;/code&amp;gt; event analogous to the &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; command above:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-event-fx
 ::fetch-weather
 (fn [_ _]
   {:http-xhrio
    {:method :get
     :uri    &amp;amp;quot;http://api.openweathermap.org/data/2.5/onecall&amp;amp;quot;
     :params {:lat   (:lat config/home)
              :lon   (:lon config/home)
              :units &amp;amp;quot;imperial&amp;amp;quot;
              :appid config/open-weather-api-key}
     :response-format (ajax/json-response-format {:keywords? true})
     :on-success      [::events/http-success [:weather]]
     :on-failure      [::events/http-fail [:weather]]}}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;where the success and fail events are defined as:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-event-db
 ::http-success
 (fn [db [_ key-path result]]
   (assoc-in db key-path result)))

(re-frame/reg-event-db
 ::http-fail
 (fn [db [_ key-path]]
   (assoc-in db key-path {})))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;We can trigger this event at regular intervals, similar to the clock
card:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn init []
  ...
  (re-frame/dispatch
   [::poll/set-rules
    [{:interval                 900 ; 15 minutes
      :event                    [::weather/fetch-weather]
      :dispatch-event-on-start? true}]])
  ...)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The 15 minute interval is set such that the API&amp;apos;s free tier daily
request limit is apportioned throughout the day with some headroom
remaining.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Finally, it is customary to create a &amp;amp;quot;level 2&amp;amp;quot; extractor subscription
to pull the payload back out of the application state even though it
is largely a trivial subscription:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::weather
 (fn [db _]
   (:weather db)))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Getting the weather payload ensconced in &amp;lt;code&amp;gt;re-frame.db/app-db&amp;lt;/code&amp;gt; with a
basic extractor is but our first step. It would be awkward for our
view to consume directly from the full API payload as it contains many
elements that would need to be filtered out or ignored; it also has
the disadvantage that re-frame would have to re-render the weather
element every time the payload is fetched even for UI elements that do
not need to change. Enter the &amp;amp;quot;level 3&amp;amp;quot; &amp;lt;a href=&amp;quot;https://day8.github.io/re-frame/subscriptions/&amp;quot;&amp;gt;materialized
view&amp;lt;/a&amp;gt;, which filters down the payload into meaningful
units of work. In this case, these units are:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Sunrise and sunset time&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Current conditions&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;6 day forecast&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;The sunrise/sunset subscription is easy once we&amp;apos;ve defined the
&amp;lt;code&amp;gt;epoch-&amp;amp;gt;local-date&amp;lt;/code&amp;gt; helper (that uses &amp;lt;a href=&amp;quot;https://github.com/andrewmcveigh/cljs-time&amp;quot;&amp;gt;cljs-time&amp;lt;/a&amp;gt; internally) to
parse the times into an object:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::sun
 :&amp;amp;lt;- [::weather]
 (fn [{{:keys [sunrise sunset]} :current} _]
   {:sunrise (-&amp;amp;gt; sunrise epoch-&amp;amp;gt;local-date .toUsTimeString)
    :sunset  (-&amp;amp;gt; sunset epoch-&amp;amp;gt;local-date .toUsTimeString)}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The current conditions subscription is also relatively simple,
involving some light formatting (some of which could arguably be
pushed down to the view layer):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::conditions
 :&amp;amp;lt;- [::weather]
 (fn [{{humidity                :humidity
        feels-like              :feels_like
        current-temp            :temp
        [{:keys [description]}] :weather} :current
       [{:keys                [rain snow]
         {low :min high :max} :temp}]     :daily} _]
   {:humidity    (-&amp;amp;gt; humidity (str &amp;amp;quot;%&amp;amp;quot;))
    :feels-like  (-&amp;amp;gt; feels-like int (str &amp;amp;quot;Â°&amp;amp;quot;))
    :description (some-&amp;amp;gt; description str/capitalize)
    :rain        (some-&amp;amp;gt; rain mm-&amp;amp;gt;in (round-nonzero 2) (str &amp;amp;quot;\&amp;amp;quot;&amp;amp;quot;))
    :snow        (some-&amp;amp;gt; snow mm-&amp;amp;gt;in (round-nonzero 2) (str &amp;amp;quot;\&amp;amp;quot;&amp;amp;quot;))
    :temp        (some-&amp;amp;gt; current-temp int (str &amp;amp;quot;Â°&amp;amp;quot;))
    :low         (some-&amp;amp;gt; low int (str &amp;amp;quot;Â°&amp;amp;quot;))
    :high        (some-&amp;amp;gt; high int (str &amp;amp;quot;Â°&amp;amp;quot;))}))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This subscription plucks the current weather conditions from the
payload (using the fancy &amp;lt;a href=&amp;quot;https://clojure.org/guides/destructuring&amp;quot;&amp;gt;destructuring&amp;lt;/a&amp;gt; that makes Clojure so
effective) and returns a new, sparser map with the values formatted
and ready to be used in a view.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The most complex subscription is the forecast, which involves
processing the &amp;lt;code&amp;gt;:daily&amp;lt;/code&amp;gt; list of elements and returning a new list of
ready-to-template maps:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-sub
 ::forecast
 :&amp;amp;lt;- [::weather]
 (fn [{forecast :daily} _]
   (-&amp;amp;gt;&amp;amp;gt; forecast
        rest                            ; skip today
        (map (fn [{date                 :dt
                   {low :min high :max} :temp
                   rain                 :rain
                   snow                 :snow
                   [{icon-id :id} &amp;amp;amp; _]  :weather}]
               {:epoch   date
                :weekday (-&amp;amp;gt; date
                             epoch-&amp;amp;gt;local-date
                             .getWeekday
                             number-&amp;amp;gt;weekday)
                :icon    (id-&amp;amp;gt;icon icon-id)
                :high    (some-&amp;amp;gt; high int (str &amp;amp;quot;Â°&amp;amp;quot;))
                :low     (some-&amp;amp;gt; low int (str &amp;amp;quot;Â°&amp;amp;quot;))
                :rain    (some-&amp;amp;gt; rain mm-&amp;amp;gt;in (round-nonzero 1) (str &amp;amp;quot;\&amp;amp;quot;&amp;amp;quot;))
                :snow    (some-&amp;amp;gt; snow mm-&amp;amp;gt;in (round-nonzero 1) (str &amp;amp;quot;\&amp;amp;quot;&amp;amp;quot;))}))
        (take 6))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This is similar to the current conditions subscription above; the
major change here is that we are &amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt;ing over the list of forecasts
and taking only a fixed number of them.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This wraps up the event/subscription handling; with this code, we now
ingest from the API and have defined a graph of subscriptions that
whittles the payload down into filtered chunks that are ready to be
placed into our view.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;weather-card&amp;quot;&amp;gt;Weather Card&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Creating views like the weather card is as much as art as it is an
engineering effort, and I don&amp;apos;t expect I&amp;apos;d win any awards for either
aspect.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Like any normal Clojure function, breaking our view into smaller
pieces will greatly aid readability:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn weather []
  [:&amp;amp;gt; Card
   [:&amp;amp;gt; CardContent
    [weather-description]
    [weather-conditions]
    [weather-forecast]]])
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Like the &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;previous installment&amp;lt;/a&amp;gt;, the view uses uses the
&amp;lt;a href=&amp;quot;https://material-ui.com/&amp;quot;&amp;gt;Material-UI&amp;lt;/a&amp;gt; react framework (i.e., the &amp;lt;code&amp;gt;Card&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;CardContent&amp;lt;/code&amp;gt;
components and many more) which comes with much saner style defaults
than any CSS I could cook up.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn weather-conditions []
  [:&amp;amp;gt; Grid {:container true :justify &amp;amp;quot;center&amp;amp;quot;}
   [:&amp;amp;gt; Grid {:item true :xs 3}
    [:&amp;amp;gt; Typography {:variant &amp;amp;quot;h1&amp;amp;quot;}
     ;; Display a large icon of current conditions
     [:i {:class (str &amp;amp;quot;wi wi-&amp;amp;quot;
                      @(re-frame/subscribe [::weather/icon]))}]]]
   [:&amp;amp;gt; Grid {:item true :xs 5}
    [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h1&amp;amp;quot;
                    :display &amp;amp;quot;inline&amp;amp;quot;}
     ;; Large view of the current temperature
     (:temp @(re-frame/subscribe [::weather/conditions]))]]
   [:&amp;amp;gt; Grid {:item true :xs 2}
    (let [{:keys [low high]}
	     @(re-frame/subscribe [::weather/conditions])]
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;right&amp;amp;quot; :variant &amp;amp;quot;h4&amp;amp;quot;}
       high [:br] low])]])
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;With some minor extra styling, we end up with a nice, large display of
the current temperature:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/weather-current.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/weather-current.png&amp;quot; alt=&amp;quot;Current weather&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Like the companion subscription, the forecast view &amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt;s over the
individual days in the subscribed output to produce, in this case,
&amp;lt;code&amp;gt;Grid&amp;lt;/code&amp;gt; items to fill the card:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn weather-forecast []
  [:&amp;amp;gt; Grid {:container true}
   (map
    (fn [{:keys [epoch weekday icon high low rain snow]}]
      ^{:key epoch}
      [:&amp;amp;gt; Grid {:item true :xs 2}
       [:&amp;amp;gt; Typography {:key epoch
                       :variant &amp;amp;quot;body1&amp;amp;quot;
                       :align &amp;amp;quot;center&amp;amp;quot;}
        weekday]
       [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h5&amp;amp;quot;}
        [:i {:class (str &amp;amp;quot;wi wi-&amp;amp;quot; icon)}]]
       [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;subtitle2&amp;amp;quot;}
        high
        (gstring/unescapeEntities &amp;amp;quot;&amp;amp;amp;#8194;&amp;amp;quot;)
        low
	    (when rain
          [:&amp;amp;lt;&amp;amp;gt; [:br] (list &amp;amp;quot; &amp;amp;quot; rain)])
        (when snow
          [:&amp;amp;lt;&amp;amp;gt;
            (list &amp;amp;quot; &amp;amp;quot; snow)])]])
    @(re-frame/subscribe [::weather/forecast]))])
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;When generating view elements dynamically, specifying the &amp;lt;code&amp;gt;key&amp;lt;/code&amp;gt; is
important for re-frame (and React under-the-hood) to reliably match up
elements that must be re-rendered when the payload changes. This gives
us our 6-day forecast (which is all I could fit on the card even
though the API returns more data):&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/weather-forecast.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/weather-forecast.png&amp;quot; alt=&amp;quot;Weather forecast&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Last but not least, having a general text description of the weather
is handy to capture leftover details that do not appear elsewhere in
the UI:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn weather-description []
  (let [{:keys [humidity feels-like description rain snow]}
        @(re-frame/subscribe [::weather/conditions])]
    (-&amp;amp;gt;&amp;amp;gt; [{:content description :render? description}
          {:prefix &amp;amp;quot;Feels like &amp;amp;quot; :content feels-like :render? true}
          {:content humidity :render? true}
          {:postfix &amp;amp;quot; rain&amp;amp;quot; :content rain :render? rain}
          {:postfix &amp;amp;quot; snow&amp;amp;quot; :content snow :render? snow}]
         (map (fn [{:keys [prefix postfix content render?]}]
                (if render?
                  (-&amp;amp;gt;&amp;amp;gt; [prefix content postfix] (remove nil?) vec)
                  [])))
         (remove empty?)
         (interpose [&amp;amp;quot; | &amp;amp;quot;])
         (apply concat [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot;
                                       :color &amp;amp;quot;textSecondary&amp;amp;quot;
                                       :variant &amp;amp;quot;body1&amp;amp;quot;}])
         vec)))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This function is more elaborate than it needs to be, but is handy for
adding new things to appear in the description--it first converts the
individual datapoints into a vector of maps that (depending on the
value of the &amp;lt;code&amp;gt;:render?&amp;lt;/code&amp;gt; key) are subsequently concatenated into a
&amp;lt;code&amp;gt;|&amp;lt;/code&amp;gt;-separated series of descriptions:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/weather-description.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/weather-description.png&amp;quot; alt=&amp;quot;Weather description&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;The full working code is available in &amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/ac0ba2f5c7d985aceca03fdb079050d498983587/src/cljs/cockpit/weather.cljs&amp;quot;&amp;gt;weather.cljs&amp;lt;/a&amp;gt; and
&amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/ac0ba2f5c7d985aceca03fdb079050d498983587/src/cljs/cockpit/views.cljs&amp;quot;&amp;gt;views.cljs&amp;lt;/a&amp;gt; which include a few extra visual tweaks and custom
React components. Also omitted from the code in this post are a few
visual details from the screenshot above, including the &amp;amp;quot;refresh&amp;amp;quot;
button that triggers the &amp;lt;code&amp;gt;::fetch-weather&amp;lt;/code&amp;gt; event on-demand and the
timer in the corner showing how much time has elapsed since the last
fetch--not essential features for everyday use, but valuable for
debugging.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With luck, the next post in this series will get to my favorite part
of the dashboard: the transit card.&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript&amp;quot;&amp;gt;Part 1&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Part 2&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-3&amp;quot;&amp;gt;Part 3&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/building-a-personal-dashboard-in-clojurescript/"/>
    <title>Building a Personal Dashboard in ClojureScript</title>
    <updated>2021-09-13T02:19:36Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;After the 100th time checking the weather or looking up transit times
before heading out the door in the morning, I came to the realization
that having a tablet mounted near my front door with relevant
information would be useful. In anticipation of venturing outdoors
more regularly in a post-vaccine world, I decided to build a personal
dashboard as my pandemic project.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;There is a good deal of prior art in this space, from the &amp;lt;a href=&amp;quot;https://magicmirror.builders/&amp;quot;&amp;gt;Magic
Mirror&amp;lt;/a&amp;gt; Raspberry-Pi-deployed dashboard intended to be embedded in a
DIY mirror, to customizable &amp;lt;a href=&amp;quot;https://apps.apple.com/us/app/id659672658&amp;quot;&amp;gt;iPad apps&amp;lt;/a&amp;gt; that have all the common
personal dashboard features out-of-the-box. For my part, I wanted to
balance the customizability of a DIY project with the lightweight-ness
of a solution that runs entirely on a tablet. I specifically wanted to
customize the particular APIs used, including some less common sources
like local transit times. Though I make no claims to being a frontend
developer, I expect it is uncontroversial to say that a backend-less
&amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Single-page_application&amp;quot;&amp;gt;SPA&amp;lt;/a&amp;gt; is among the more lightweight options in the web application
space. And my go-to for building frontend applications is
&amp;lt;a href=&amp;quot;https://clojurescript.org/&amp;quot;&amp;gt;ClojureScript&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This series of posts will walk through the creation of &amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit&amp;quot;&amp;gt;cockpit&amp;lt;/a&amp;gt;,
the ClojureScript SPA I now have mounted on my wall. Before getting to
specifics, let&amp;apos;s look at the final dashboard:&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/full.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/full.png&amp;quot; alt=&amp;quot;Full dashboard view not guaranteed to make sense&amp;quot; width=&amp;quot;600&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;Some highlights:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;The dashboard is divided into &amp;amp;quot;Cards&amp;amp;quot; using a responsive grid layout
with primitives from &amp;lt;a href=&amp;quot;https://material-ui.com/&amp;quot;&amp;gt;Material-UI&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Data for each card is polled at a regular interval with a timer in
the bottom of each card showing the time elapsed since the data was
last fetched and a &amp;amp;quot;refresh&amp;amp;quot; button to fetch the data right away.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;The weather card is sourced from the &amp;lt;a href=&amp;quot;https://openweathermap.org/api&amp;quot;&amp;gt;Open Weather Map API&amp;lt;/a&amp;gt; with
icon styling provided by the &amp;lt;a href=&amp;quot;https://erikflowers.github.io/weather-icons/&amp;quot;&amp;gt;Weather Icons&amp;lt;/a&amp;gt; font. It includes
typical low/high, forecast, and precipitation information.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;The clock card is self-explanatory--the time is obtained from a
plain Javascript &amp;lt;code&amp;gt;Date()&amp;lt;/code&amp;gt; call which returns the system date/time in
the local timezone.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;Stock data is pulled from the &amp;lt;a href=&amp;quot;https://iexcloud.io/docs/api/&amp;quot;&amp;gt;IEX Cloud API&amp;lt;/a&amp;gt; and styled with
&amp;lt;a href=&amp;quot;https://github.com/borisyankov/react-sparklines&amp;quot;&amp;gt;react-sparklines&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;The transit card contains rows with arrival times at a transit stop
(arrows indicating cardinal direction at the stop). The data source
here is an &amp;lt;a href=&amp;quot;https://www.opentripplanner.org/&amp;quot;&amp;gt;Open Trip Planner&amp;lt;/a&amp;gt; instance loaded with the
&amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/General_Transit_Feed_Specification&amp;quot;&amp;gt;GTFS&amp;lt;/a&amp;gt; feeds from the particular transit agency in
question.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;The compiled dashboard is physically hosted from my home router and
is displayed on an inexpensive &amp;lt;a href=&amp;quot;https://www.amazon.com/Fire-HD-8-Previous-Generation-9th/dp/B0794RHPZD&amp;quot;&amp;gt;Amazon Fire 8&amp;lt;/a&amp;gt; tablet with the
&amp;lt;a href=&amp;quot;https://www.fully-kiosk.com/&amp;quot;&amp;gt;Fully Kiosk&amp;lt;/a&amp;gt; app.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;There are loads more details that go into a card--each is effectively
its own mini application. This post will primarily cover the skeleton
of the dashboard and the bare-bones clock card; I&amp;apos;ll aspirationally
follow-up with future posts to explore the other cards in the
dashboard.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;dashboard-skeleton&amp;quot;&amp;gt;Dashboard Skeleton&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;In the ClojureScript SPA space, there are several stand-out React
wrappers vying for dominance. For this project, I chose &amp;lt;a href=&amp;quot;https://github.com/day8/re-frame&amp;quot;&amp;gt;re-frame&amp;lt;/a&amp;gt;
since the learning curve for a small-scale project was lighter than
&amp;lt;a href=&amp;quot;https://fulcro.fulcrologic.com/&amp;quot;&amp;gt;Fulcro&amp;lt;/a&amp;gt;. Rather than wire all the various libraries, build tools,
and debugging utilities together manually, the &amp;lt;a href=&amp;quot;https://github.com/day8/re-frame-template&amp;quot;&amp;gt;re-frame-template&amp;lt;/a&amp;gt;
makes it easy to get started. This&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;lein new re-frame cockpit +10x +cider +kondo +test
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;is basically how I seeded the repo. The biggest opinion imposed in the
template aside from re-frame itself is &amp;lt;a href=&amp;quot;https://github.com/thheller/shadow-cljs&amp;quot;&amp;gt;shadow-cljs&amp;lt;/a&amp;gt; as the build
tool.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With a skeleton project in hand, let&amp;apos;s wire up the views. Dipping our
toes into Material UI requires adding it as a dependency to
&amp;lt;code&amp;gt;src/cljs/deps.edn&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;{:npm-deps {&amp;amp;quot;@material-ui/core&amp;amp;quot;  &amp;amp;quot;4.9.13&amp;amp;quot;
            &amp;amp;quot;@material-ui/icons&amp;amp;quot; &amp;amp;quot;4.9.1&amp;amp;quot;}
 ...}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which will instruct &amp;lt;code&amp;gt;shadow-cljs&amp;lt;/code&amp;gt; to fetch the dependencies through
&amp;lt;code&amp;gt;npm&amp;lt;/code&amp;gt; during the build.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;src/cljs/&amp;amp;lt;project&amp;amp;gt;/views.cljs&amp;lt;/code&amp;gt; file is where the &amp;amp;quot;Hello World&amp;amp;quot;
&amp;lt;code&amp;gt;main-panel&amp;lt;/code&amp;gt; lives. Thanks to the magic of &amp;lt;code&amp;gt;shadow-cljs&amp;lt;/code&amp;gt;, we can
require the React components directly into the &amp;lt;code&amp;gt;cockpit.views&amp;lt;/code&amp;gt;
namespace as if they were native ClojureScript code:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(ns cockpit.views
  (:require
   [re-frame.core :as re-frame]
   [&amp;amp;quot;@material-ui/core/Card&amp;amp;quot;        :default Card]
   [&amp;amp;quot;@material-ui/core/CardContent&amp;amp;quot; :default CardContent]
   [&amp;amp;quot;@material-ui/core/Container&amp;amp;quot;   :default Container]
   [&amp;amp;quot;@material-ui/core/Grid&amp;amp;quot;        :default Grid]
   [&amp;amp;quot;@material-ui/core/CssBaseline&amp;amp;quot; :default CssBaseline]
   [&amp;amp;quot;@material-ui/core/Typography&amp;amp;quot;  :default Typography]))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;With this in place, we can modify the &amp;lt;code&amp;gt;main-panel&amp;lt;/code&amp;gt; with our Material
UI &amp;lt;a href=&amp;quot;https://material-ui.com/components/grid/&amp;quot;&amp;gt;Grid&amp;lt;/a&amp;gt; components:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn main-panel []
  (let [card-opts {:item true :xs 12 :sm 12 :md 6  :lg 4}]
    [:&amp;amp;gt; CssBaseline
     [:&amp;amp;gt; Container {:maxWidth false}
      [:&amp;amp;gt; Grid {:container true :spacing 1}
       [:&amp;amp;gt; Grid card-opts [weather]]
       [:&amp;amp;gt; Grid card-opts [clock]]
       [:&amp;amp;gt; Grid card-opts [transit]]
       [:&amp;amp;gt; Grid card-opts [stocks]]]]]))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;:&amp;amp;gt;&amp;lt;/code&amp;gt; shorthand adapts React components into Reagent
components. &amp;lt;code&amp;gt;weather&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;clock&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;transit&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;stocks&amp;lt;/code&amp;gt; are functions
that define the contents of each card. This gives us a blank slate to
fill in our cards with content.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;clock-card&amp;quot;&amp;gt;Clock Card&amp;lt;/h1&amp;gt;
&amp;lt;a href=&amp;quot;/img/posts/cockpit/clock.png&amp;quot;&amp;gt;
  &amp;lt;img src=&amp;quot;/img/posts/cockpit/clock.png&amp;quot; alt=&amp;quot;Clock card&amp;quot; width=&amp;quot;400&amp;quot; /&amp;gt;
&amp;lt;/a&amp;gt;
&amp;lt;p&amp;gt;The clock card consists of a header with the date, the current local
time, a side-by-side view of the time in the US Central and Pacific
time zones, and the sunrise/sunset times.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;clock&amp;lt;/code&amp;gt; view implementing this looks something like:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn clock []
  [:&amp;amp;gt; Card
   [:&amp;amp;gt; CardContent

    [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h4&amp;amp;quot;}
     @(re-frame/subscribe [::events/day])]

    [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h1&amp;amp;quot;}
     @(re-frame/subscribe [::events/time])]

    [:&amp;amp;gt; Grid {:container true :spacing 0 :direction &amp;amp;quot;row&amp;amp;quot;
              :justify &amp;amp;quot;center&amp;amp;quot; :alignItems &amp;amp;quot;center&amp;amp;quot;}
     [:&amp;amp;gt; Grid {:item true :xs 6}
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h6&amp;amp;quot;}
       @(re-frame/subscribe [::events/time-pt])]
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;body2&amp;amp;quot;}
       &amp;amp;quot;San Francisco&amp;amp;quot;]]
     [:&amp;amp;gt; Grid {:item true :xs 6}
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;h6&amp;amp;quot;}
       @(re-frame/subscribe [::events/time-ct])]
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot; :variant &amp;amp;quot;body2&amp;amp;quot;}
       &amp;amp;quot;Chicago&amp;amp;quot;]]]

    (let [{:keys [sunrise sunset]}
          @(re-frame/subscribe [::events/sun])]
      [:&amp;amp;gt; Typography {:align &amp;amp;quot;center&amp;amp;quot;
                      :variant &amp;amp;quot;h6&amp;amp;quot;}
       [:i {:class &amp;amp;quot;wi wi-sunrise&amp;amp;quot;}]
       sunrise
       [:i {:class &amp;amp;quot;wi wi-sunset&amp;amp;quot;}]
       sunset])]])
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which makes liberal use of the &amp;lt;code&amp;gt;Typography&amp;lt;/code&amp;gt; Material-UI component
along with a nested &amp;lt;code&amp;gt;Grid&amp;lt;/code&amp;gt; component to show the ET/CT timezones
side-by-side. The only missing pieces are some minor styling to fix
the height of the &amp;lt;code&amp;gt;Card&amp;lt;/code&amp;gt; so it fills the containing &amp;lt;code&amp;gt;Grid&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Nested within the React components that make up the clock view are
&amp;lt;code&amp;gt;re-frame/subscribe&amp;lt;/code&amp;gt; functions which bind the view to re-frame
&amp;lt;em&amp;gt;subscriptions&amp;lt;/em&amp;gt; which are, effectively, listeners for re-frame
&amp;lt;em&amp;gt;events&amp;lt;/em&amp;gt;. Subscriptions and events are commonly defined in
&amp;lt;code&amp;gt;src/cljs/&amp;amp;lt;project&amp;amp;gt;/events.cljs&amp;lt;/code&amp;gt;. The clock events and subscriptions
for the main time display are comparatively simple:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(re-frame/reg-event-db
 ::timer
 (fn [db _]
   (assoc db :clock (js/Date.))))

(re-frame/reg-sub
 ::clock
 (fn [db _]
   (:clock db)))

(re-frame/reg-sub
 ::time
 :&amp;amp;lt;- [::clock]
 (fn [clock _]
   (.toLocaleTimeString
    clock
    []
    (clj-&amp;amp;gt;js {:hour &amp;amp;quot;numeric&amp;amp;quot; :minute &amp;amp;quot;numeric&amp;amp;quot; :hour12 true}))))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Subscriptions and events in re-frame are a &amp;lt;a href=&amp;quot;https://day8.github.io/re-frame/subscriptions/&amp;quot;&amp;gt;complex&amp;lt;/a&amp;gt;
topic, so this treatment will only begin to scratch the surface. In
short, the &amp;lt;code&amp;gt;::timer&amp;lt;/code&amp;gt; event--when triggered--will update the &amp;lt;code&amp;gt;:clock&amp;lt;/code&amp;gt;
key in the application&amp;apos;s &amp;lt;code&amp;gt;db&amp;lt;/code&amp;gt; state hash-map. The &amp;lt;code&amp;gt;::clock&amp;lt;/code&amp;gt;
subscription defined with &amp;lt;code&amp;gt;reg-sub&amp;lt;/code&amp;gt; is a &amp;amp;quot;Layer 2&amp;amp;quot; extractor
subscription that does nothing but pluck the &amp;lt;code&amp;gt;:clock&amp;lt;/code&amp;gt; key back out of
the application &amp;lt;code&amp;gt;db&amp;lt;/code&amp;gt;. The &amp;lt;code&amp;gt;::time&amp;lt;/code&amp;gt; subscription is a &amp;amp;quot;Layer 3&amp;amp;quot;
materialized view of this extracted value (the &amp;lt;code&amp;gt;:&amp;amp;lt;- [::clock]&amp;lt;/code&amp;gt; adds
the subscription dependency), converting it to a string that is ready
to be inserted into the rendered view. Internally, re-frame chains
these subscriptions into a graph, updating all the Layer 2
subscriptions when the db changes, and then updates only the changed
Layer 3 subscriptions and their subscribed views, leaving everything
else untouched.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The remaining subscriptions are left as an exercise to the reader with
spoilers available (isolated to a dedicated namespace) in the
&amp;lt;a href=&amp;quot;https://github.com/malloc47/cockpit/blob/ac0ba2f5c7d985aceca03fdb079050d498983587/src/cljs/cockpit/clock.cljs&amp;quot;&amp;gt;&amp;lt;code&amp;gt;clock.cljs&amp;lt;/code&amp;gt; file&amp;lt;/a&amp;gt; in the source.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To tie things together, we must continually trigger the &amp;lt;code&amp;gt;::timer&amp;lt;/code&amp;gt;
event for our clock to receive updates and subsequently be re-rendered
in the view. For this, we turn to &amp;lt;a href=&amp;quot;https://github.com/gadfly361/re-pollsive&amp;quot;&amp;gt;re-pollsive&amp;lt;/a&amp;gt;, a library that lets
us trigger events based on a fixed time interval. After adding the
library dependency to the &amp;lt;code&amp;gt;project.clj&amp;lt;/code&amp;gt; file, we initialize it in the
&amp;lt;code&amp;gt;src/cljs/&amp;amp;lt;project&amp;amp;gt;/core.cljs&amp;lt;/code&amp;gt; file to continually send the &amp;lt;code&amp;gt;::timer&amp;lt;/code&amp;gt;
event:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(defn init []
  ...
  (re-frame/dispatch [::poll/set-rules
                      [{:interval                 1
                        :event                    [::events/timer]
                        :dispatch-event-on-start? true}]])
  ...)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;An &amp;lt;code&amp;gt;:interval&amp;lt;/code&amp;gt; of 1 will update our clock every second.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With all this in place, a &amp;lt;code&amp;gt;lein dev&amp;lt;/code&amp;gt; will build and begin serving the
application from &amp;lt;a href=&amp;quot;http://localhost:8280&amp;quot;&amp;gt;localhost:8280&amp;lt;/a&amp;gt;, complete
with hot-reloading to make iterating and tweaking the app seamless.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;next post&amp;lt;/a&amp;gt; in this series will dive into the Weather card,
which involves our first external API calls.&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Part 1&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-2&amp;quot;&amp;gt;Part 2&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;/building-a-personal-dashboard-in-clojurescript-part-3&amp;quot;&amp;gt;Part 3&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/migrating-to-nixos/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/migrating-to-nixos/"/>
    <title>Migrating to NixOS</title>
    <updated>2019-03-15T02:48:51Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;After running &amp;lt;a href=&amp;quot;https://www.archlinux.org/&amp;quot;&amp;gt;Arch Linux&amp;lt;/a&amp;gt; for the last decade, I&amp;apos;ve finally made
the jump to &amp;lt;a href=&amp;quot;https://nixos.org/&amp;quot;&amp;gt;NixOS&amp;lt;/a&amp;gt;. For me, this means updating two VMs
(VirtualBox and VMWare) and a bare-metal install (an aging MacBook
Air).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;apos;ve repurposed my old &amp;lt;a href=&amp;quot;https://github.com/malloc47/config&amp;quot;&amp;gt;config repo&amp;lt;/a&amp;gt; to store both my dotfiles as
well as the NixOS &amp;lt;code&amp;gt;configuration.nix&amp;lt;/code&amp;gt; files.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Since I was already making a big transition, I decided to take the
opportunity to retool a few more things in my dev setup:&amp;lt;/p&amp;gt;
&amp;lt;table&amp;gt;
&amp;lt;thead&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt; &amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Old&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;New&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/thead&amp;gt;
&amp;lt;tbody&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;OS&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Arch Linux&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;NixOS&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Shell&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Bash&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Zsh&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Terminal&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;urxvt&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Alacritty&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Multiplexer&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;screen&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;tmux&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Window Manager&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;XMonad&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;i3&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;Editor&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Emacs&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Emacs&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;p&amp;gt;I initially wanted to make the jump from X11 to Wayland, but NixOS
&amp;lt;a href=&amp;quot;https://github.com/NixOS/nixpkgs/projects/11&amp;quot;&amp;gt;isn&amp;apos;t quite ready&amp;lt;/a&amp;gt; just yet.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;My goal for this writeup is to document the rationale for making the
switch, capture the stuff I wish I had known before diving into the
Nix language, and describe the particulars of how I organize my new
setup.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;motivation&amp;quot;&amp;gt;Motivation&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;While I lack a single compelling reason to make the jump, there are a
few pain points with my Arch setup that, together, pushed me to give
NixOS a shot:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Falling behind on Arch changes.&amp;lt;/strong&amp;gt; While I benefited a few times
from Arch&amp;apos;s rolling update process, in practice I&amp;apos;ve rarely found it
was something I needed. Not staying on top of Arch updates
invariably leads to painful upgrades that take time to work
through. Taking snapshots of my VMs reduced a lot of this upgrade
risk, but it takes more time than I&amp;apos;m willing to spend to upgrade my
bare-metal Arch install after neglecting it for extended periods.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Package drift among machines.&amp;lt;/strong&amp;gt; Having my VMs get slightly
different versions of packages from my Linux laptop, or forgetting
to install the same set of packages across all machines was a minor
but consistent annoyance. I kept a list of arch packages that I&amp;apos;d
move from machine to machine, but nothing forced me to audit that
the installed packages matched the list.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Limited local install options.&amp;lt;/strong&amp;gt; I&amp;apos;ve grown reliant on Docker for
infrastructural components (e.g. Postgres), but being able to
install specific dev tools on a per-project basis (I&amp;apos;ve been playing
with &amp;lt;a href=&amp;quot;https://www.qgis.org/&amp;quot;&amp;gt;QGIS&amp;lt;/a&amp;gt; recently) is something I&amp;apos;ve constantly found
painful, the few times I&amp;apos;ve bothered at all.&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h1 id=&amp;quot;nix&amp;quot;&amp;gt;Nix&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;The big ideas behind the Nix ecosystem are covered in &amp;lt;a href=&amp;quot;https://nixos.org/nix/&amp;quot;&amp;gt;detail
elsewhere&amp;lt;/a&amp;gt;; what was appealing to me in particular was Nix&amp;apos;s
emphasis on reproducibility, file-driven configuration, and functional
approach to its package repository, nixpkgs. You can think of the Nix
package manager as a hybrid of &amp;lt;code&amp;gt;apt-get&amp;lt;/code&amp;gt; and Python&amp;apos;s &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt;
with a sprinkling of &amp;lt;code&amp;gt;git&amp;lt;/code&amp;gt;; you can use Nix to build multiple,
isolated sets of packages on, say, a per-project basis, with the
guarantee that Nix only needs to fetch (or build) shared dependencies
once. Nix stores all built packages in the Nix store which serves as a
local cache. Nix grafts together a collection of Linux directories
(&amp;lt;code&amp;gt;bin&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;usr&amp;lt;/code&amp;gt;, etc.) by symlinking the appropriate files contained in
the packages that live in the Nix store. This isolated environment can
be system-wide (in the case of NixOS), local to your user (&amp;lt;code&amp;gt;nix-env&amp;lt;/code&amp;gt;)
or tailed for a specific project (&amp;lt;code&amp;gt;nix-shell&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;nix-shell&amp;lt;/code&amp;gt; serves a few different roles in the Nix ecosystem, but one
of those roles is to make dependencies defined in a &amp;amp;quot;derivation&amp;amp;quot;
(Nix&amp;apos;s version of a makefile) available for use in a shell. These
derivations are used to define a hermetically-sealed environment for
building a package as well as collecting the commands to configure and
run a build. We can re-use just the environment-prep part of a
derivation along with &amp;lt;code&amp;gt;nix-shell&amp;lt;/code&amp;gt; to drop us into a terminal that has
exactly the packages we want. Here&amp;apos;s an example of a derivation for a
TeX project:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;with import &amp;amp;lt;nixpkgs&amp;amp;gt; {};

stdenv.mkDerivation {
  name = &amp;amp;quot;my-document&amp;amp;quot;;
  buildInputs = with pkgs; [
    texlive.combined.scheme-full
  ];
  shellHook = &amp;amp;quot;pdflatex document.tex&amp;amp;quot;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;With this derivation placed in &amp;lt;code&amp;gt;shell.nix&amp;lt;/code&amp;gt;, running a &amp;lt;code&amp;gt;nix-shell&amp;lt;/code&amp;gt; in
the same directory will fetch the entirety of TeX Live (which is &amp;lt;a href=&amp;quot;https://tex.stackexchange.com/questions/302676/how-large-is-the-full-install-of-texlive/323739&amp;quot;&amp;gt;not
small&amp;lt;/a&amp;gt;)
and make all the related files, configuration, tools, fonts, commands,
etc. available in the shell. It then uses one of these tools
(&amp;lt;code&amp;gt;pdflatex&amp;lt;/code&amp;gt;) to run the &amp;amp;quot;build&amp;amp;quot; of &amp;lt;code&amp;gt;document.tex&amp;lt;/code&amp;gt; to generate a
PDF. Writing a full derivation file isn&amp;apos;t necessary if you don&amp;apos;t need
to be dropped into a shell for further work. The following is
equivalent to the derivation above, but does not keep TeX Live
available in the shell after it is done building the document:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;nix run nixpkgs.texlive.combined.scheme-full -c pdflatex document.tex
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;I only rarely need TeX, so being able to make TeX available on a
per-project basis without having all its commands pollute my &amp;lt;code&amp;gt;PATH&amp;lt;/code&amp;gt;
when doing non-TeX work is useful. Going further, I can mix-and-match
versions of Python, the JVM, Postgres, etc. independently for each
project I have without having to use &amp;lt;code&amp;gt;sudo&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;nixpkgs&amp;quot;&amp;gt;nixpkgs&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;While the Nix Expression Language is somewhat esoteric, the big ideas
aren&amp;apos;t far removed from features in mainstream functional
languages. nixpkgs in particular can be conceptualized as a single
large map (called an Attribute Set or attrset in Nix) from keys to
derivations:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;{
  # &amp;amp;lt;snip&amp;amp;gt;
  tmux = callPackage ../tools/misc/tmux { };
  # &amp;amp;lt;snip&amp;amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;You can see a meaty example of nixpkg&amp;apos;s package list &amp;lt;a href=&amp;quot;https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/all-packages.nix&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. This
would normally be an unwieldy thing to build in memory on every
interaction with the package manager, however Nix lazily loads the
contents of this attrset. Nix even provides the option to make these
attribute sets &amp;amp;quot;recursive&amp;amp;quot; allowing the values to reference sibling
keys, e.g.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;rec { a = 2; b = a+3; }
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;nixpkgs provides &amp;lt;a href=&amp;quot;https://nixos.org/nixos/nix-pills/nixpkgs-overriding-packages.html&amp;quot;&amp;gt;facilities&amp;lt;/a&amp;gt; to change or update existing
packages with custom configuration, and add new entries to the package
attrset. It does this by way of &amp;amp;quot;overlays&amp;amp;quot; which are a &amp;lt;a href=&amp;quot;https://r6.ca/blog/20140422T142911Z.html&amp;quot;&amp;gt;fixed
point&amp;lt;/a&amp;gt; over the package attrset. Nix&amp;apos;s approach of effectively
rebuilding a facsimile of the &amp;lt;a href=&amp;quot;https://www.pathname.com/fhs/&amp;quot;&amp;gt;FHS&amp;lt;/a&amp;gt; on every run means that
&amp;amp;quot;manual&amp;amp;quot; intervention to install things outside of a package manager
(say, copying a &amp;lt;code&amp;gt;ttf&amp;lt;/code&amp;gt; font into &amp;lt;code&amp;gt;/usr/share/fonts&amp;lt;/code&amp;gt;) is not feasible,
so having an easy way to fold your own set of custom packages into the
package attrset is vital.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The other important aspect to nixpkgs is that it is versioned in git
(conveniently alongside NixOS in the same repo). The Nix CLI tools can
fetch and install the latest set of packages by rolling the local
clone of nixpkgs forward and then rebuilding your packages. Such a
rebuild can apply to all the packages on your entire system, or just a
particular derivation&amp;apos;s local packages. This can work the other
direction as well: If you prefer your package set to remain completely
fixed, you can pin the nixpkgs clone to a particular git SHA. Stable
releases of NixOS are handled as branches of the nixpkgs repo, which
do get critical updates but avoid all the bleeding-edge changes that
the &amp;lt;code&amp;gt;master&amp;lt;/code&amp;gt; branch has.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;nixos&amp;quot;&amp;gt;NixOS&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;NixOS goes a step further and utilizes attrsets to configure the OS
itself. Not unlike application configuration (for which there
&amp;lt;a href=&amp;quot;https://github.com/lightbend/config&amp;quot;&amp;gt;are&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://github.com/markbates/configatron&amp;quot;&amp;gt;numerous&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://github.com/weavejester/environ&amp;quot;&amp;gt;libraries&amp;lt;/a&amp;gt;), NixOS defines
your OS in a series of one or more attrsets that are merged together;
unlike traditional configuration approaches that use a
last-merged-wins strategy, however, NixOS&amp;apos;s &amp;lt;a href=&amp;quot;https://nixos.wiki/wiki/NixOS:Properties&amp;quot;&amp;gt;properties&amp;lt;/a&amp;gt; provide
per-field control over the priority of merges along with conditionals
that control whether an option is merged or not.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This approach to OS configuration is useful for defining options
amongst a set of similar but not identical OSs. For my NixOS config,
I&amp;apos;ve created a base &amp;lt;a href=&amp;quot;https://github.com/malloc47/config/blob/cd6d1568f50c9b839f5146b45362cd6c4d857882/nixos/configuration.nix&amp;quot;&amp;gt;&amp;lt;code&amp;gt;configuration.nix&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt; file that contains common
options that I want set across all my machines (abbreviated example
here):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;{ config, pkgs, ... }:
{
  time.timeZone = &amp;amp;quot;America/Chicago&amp;amp;quot;;
  environment.systemPackages = with pkgs; [feh vim wget];
  programs.zsh.enable = true;
  users.users.johndoe.shell = pkgs.zsh;
  # &amp;amp;lt;snip&amp;amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;I then import this common file into host-specific files that each
contain options specific to that particular machine, e.g. a VM host:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;{ config, pkgs, ... }:
{
  imports = [ ./configuration.nix ];
  services.vmwareGuest.enable = true;
  users.users.johndoe.shell = mkOptionDefault pkgs.bash;
  # &amp;amp;lt;snip&amp;amp;gt;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Note the &amp;lt;code&amp;gt;mkOptionDefault&amp;lt;/code&amp;gt; function that reduces the priority of the
&amp;lt;code&amp;gt;pkgs.bash&amp;lt;/code&amp;gt; value from the default of 100 to 1500. Had I left off
&amp;lt;code&amp;gt;mkOptionDefault&amp;lt;/code&amp;gt;, NixOS would complain that &amp;lt;code&amp;gt;johndoe.shell&amp;lt;/code&amp;gt; was
declared twice. However, by reducing its priority, the
&amp;lt;code&amp;gt;configuration.nix&amp;lt;/code&amp;gt;&amp;apos;s definition of &amp;lt;code&amp;gt;johndoe.shell = pkgs.zsh&amp;lt;/code&amp;gt; will
take priority, despite it not being the &amp;amp;quot;last&amp;amp;quot; merged. In actuality,
NixOS builds the configuration as a whole without any notion of
ordering, and will fail loudly if it gets two property values with
equal priority.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Notice above that the NixOS configuration includes option values that
range from plain strings (e.g. &amp;lt;code&amp;gt;time.timeZone&amp;lt;/code&amp;gt;) to more complex
&amp;lt;code&amp;gt;services&amp;lt;/code&amp;gt; that wire up nontrivial operations (schedule daemons to
auto start, create systemd services, modprobe kernel modules,
etc.). Unlike nixpkgs, NixOS doesn&amp;apos;t try to specify all these
configuration options in a giant flat file; rather, it splits options
into &amp;lt;a href=&amp;quot;https://nixos.wiki/wiki/NixOS_Modules&amp;quot;&amp;gt;modules&amp;lt;/a&amp;gt; which keep options grouped into logical
units. Modules let you create new options easily, as well at attach a
meaning to each option by doing things such as configuring other
module&amp;apos;s options, composing other modules together, writing files
(also done through options, interestingly), and assorted other
activities.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To introduce new options that vary among my work VMs and my personal
laptop, I&amp;apos;ve written a &amp;lt;a href=&amp;quot;https://github.com/malloc47/config/blob/95eafec8373d9da302c5778964d4ce6e9c67ed22/modules/settings.nix&amp;quot;&amp;gt;custom NixOS module&amp;lt;/a&amp;gt;, which looks like&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;{config, pkgs, lib, ...}:

with lib;

{
  options = {
    settings = {
      username = mkOption {
        default = &amp;amp;quot;malloc47&amp;amp;quot;;
        type = with types; uniq string;
      };
      email = mkOption {
        default = &amp;amp;quot;malloc47@gmail.com&amp;amp;quot;;
        type = with types; uniq string;
      };
      # more options
    }
  }
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This module lets me set a username for the machine being built, the
keyboard layout I want to use, the email I want to use (for my git
configuration), and many other options. I&amp;apos;ve written this module as a
container of values for other modules to read, but takes no action
itself (this is a trick so I can re-use the module for home-manger,
discussed below).  However, upon importing this module elsewhere, I
can set or retrieve values for these options to parameterize the rest
of my configuration. E.g.,&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;users.users.${config.settings.username}.shell = pkgs.zsh;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;NixOS helpfully keeps a &amp;lt;a href=&amp;quot;https://nixos.org/nixos/manual/options.html&amp;quot;&amp;gt;large index&amp;lt;/a&amp;gt; of all options across all
modules defined in the base NixOS system, which is also available in
&amp;lt;code&amp;gt;man&amp;lt;/code&amp;gt; page form on an installed system:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;&amp;amp;gt; man configuration.nix
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;To utilize this declarative system configuration, NixOS provides the
&amp;lt;code&amp;gt;nixos-rebuild&amp;lt;/code&amp;gt; command which reads the &amp;lt;code&amp;gt;configuration.nix&amp;lt;/code&amp;gt; file to
find out what nixpkgs packages it requests, templates configuration
files with the option values given, and eventually builds the entire
file tree (as usual, symlinked back to the Nix store). NixOS persists
every rebuild of your system as a sequentially numbered &amp;amp;quot;generation,&amp;amp;quot;
which makes it easy to examine or roll back your entire system&amp;apos;s
configuration to a prior state. These generations are listed in the
bootloader, so if you break something in your most recent generation,
you can boot into a prior generation to find out what went wrong.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;home-manager&amp;quot;&amp;gt;home-manager&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;I&amp;apos;ve traditionally versioned my home folder&amp;apos;s dotfiles in a git repo
and deployed it with a &amp;lt;a href=&amp;quot;/git-dotfile-versioning-across-systems&amp;quot;&amp;gt;hand-rolled
script&amp;lt;/a&amp;gt;. Using a lightweight
window manager (formerly XMonad) means that significant portions of my
UI configuration live in my dotfiles, and this has led to increasingly
awkward workarounds to make this configuration portable across the
different hosts I regularly use. One example is controlling the Linux
HiDPI settings which are, to put it mildly, &amp;lt;a href=&amp;quot;https://wiki.archlinux.org/index.php/HiDPI&amp;quot;&amp;gt;a mess&amp;lt;/a&amp;gt;. I specify a
slew of font tweaks, scaling factors, and DPI settings among half a
dozen dotfiles. This makes it difficult to port my dotfiles from one
machine to another.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The formal Nix ecosystem doesn&amp;apos;t (&amp;lt;a href=&amp;quot;https://github.com/NixOS/nixpkgs/pull/9250&amp;quot;&amp;gt;yet&amp;lt;/a&amp;gt;) have a systematic
approach for writing files directly to a home folder. It &amp;lt;em&amp;gt;can&amp;lt;/em&amp;gt; place
arbitrary files in an &amp;lt;code&amp;gt;/etc&amp;lt;/code&amp;gt; folder. If you&amp;apos;re the sole user of your
machine and the application you want to configure looks at an &amp;lt;code&amp;gt;/etc&amp;lt;/code&amp;gt;
directory, you could have NixOS write your dotfiles there and forego
keeping them in your home folder at all. My use case unfortunately
doesn&amp;apos;t fit neatly into these constraints; I have enough
home-folder-only applications that an &amp;lt;code&amp;gt;/etc&amp;lt;/code&amp;gt;-based approach isn&amp;apos;t
viable.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The most Nix-native experience I&amp;apos;ve found for managing dotfiles is
&amp;lt;a href=&amp;quot;https://github.com/rycee/home-manager&amp;quot;&amp;gt;home-manager&amp;lt;/a&amp;gt;. It is not only written and managed via the Nix
Expression Language, but it follows the same philosophy as the rest of
NixOS. This includes a similar approach for splitting configuration
into modules and, in fact, it supports importing my custom module
mentioned above. Though home-manager can be run with a separate
&amp;lt;code&amp;gt;home.nix&amp;lt;/code&amp;gt; file and a &amp;lt;code&amp;gt;home-manager&amp;lt;/code&amp;gt; CLI utility to trigger &amp;amp;quot;rebuilds&amp;amp;quot;
of your home folder, it additionally exposes a &amp;lt;a href=&amp;quot;https://github.com/rycee/home-manager/pull/97&amp;quot;&amp;gt;NixOS module&amp;lt;/a&amp;gt; that
can be used in a system-level &amp;lt;code&amp;gt;configuration.nix&amp;lt;/code&amp;gt; file to rebuild your
home folder following a system-wide rebuild. Being the sole user of my
systems, having NixOS and home-manager work in lockstep is preferable
for me.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;home-manager encompasses more than just copying dotfiles to your home
folder. Some broad use cases include:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Installing packages locally for your user&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Placing dotfiles in your home folder&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Generating dotfiles from a declarative configuration&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Creating per-user systemd services (I use this for &amp;lt;code&amp;gt;emacs --daemon&amp;lt;/code&amp;gt;,
and it is quite handy).&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;It does all this by building a single package, &amp;lt;code&amp;gt;home-manager-path&amp;lt;/code&amp;gt;,
that includes all the configured local packages and dotfiles. It then
installs this package into your local Nix environment (traditionally
managed by &amp;lt;code&amp;gt;nix-env&amp;lt;/code&amp;gt;). Similar to how the rest of Nix works, each
dotfile is symlinked into your home folder from the
&amp;lt;code&amp;gt;home-manager-path&amp;lt;/code&amp;gt; package contained in the Nix store. This works
similarly to how my old, hacky script managed my dotfiles.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The choice between having home-manager generate your dotfiles
whole-cloth, or writing your dotfiles by hand is entirely up to
you. If you&amp;apos;re like me and have pre-written dotfiles sitting around,
it&amp;apos;s easy to re-use these by&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;home.file.&amp;amp;quot;.inputrc&amp;amp;quot;.source = ./.inputrc;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which insures that the &amp;lt;code&amp;gt;.inputrc&amp;lt;/code&amp;gt; file in the same folder as the
&amp;lt;code&amp;gt;home.nix&amp;lt;/code&amp;gt; file is deployed to &amp;lt;code&amp;gt;~/.inputrc&amp;lt;/code&amp;gt; in your home
folder. home-manager supports more complex parameters--my emacs
configuration has too many files to enumerate explicitly, and
home-manager can symlink the entire directory to my home folder,
creating nested directories as necessary:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;home.file.&amp;amp;quot;.emacs.d&amp;amp;quot; = {
  source = ./.emacs.d;
  recursive = true;
};
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;home-manager lets me specify file contents directly inside of
&amp;lt;code&amp;gt;home.nix&amp;lt;/code&amp;gt;, which is useful if I want to reference options defined in
the aforementioned custom module:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;home.file.&amp;amp;quot;fonts.el&amp;amp;quot; = {
  target = &amp;amp;quot;.emacs.d/config/fonts.el&amp;amp;quot;;
  text = &amp;apos;&amp;apos;
    (provide &amp;apos;fonts)
    (set-frame-font &amp;amp;quot;${config.settings.fontName}-${toString config.settings.fontSize}&amp;amp;quot;)
    (setq default-frame-alist &amp;apos;((font . &amp;amp;quot;${config.settings.fontName}-${toString config.settings.fontSize}&amp;amp;quot;)))
  &amp;apos;&amp;apos;;
};
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Since I&amp;apos;ve never had an extensive &amp;lt;code&amp;gt;.tmux.conf&amp;lt;/code&amp;gt; file, I can use
home-manger to generate it for me:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;nix&amp;quot;&amp;gt;programs.tmux = {
  enable = true;
  terminal = &amp;amp;quot;tmux-256color&amp;amp;quot;;
  shortcut = &amp;amp;quot;u&amp;amp;quot;;
};
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which creates a &amp;lt;code&amp;gt;~/.tmux.conf&amp;lt;/code&amp;gt; file with (among other contents):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;set  -g default-terminal &amp;amp;quot;tmux-256color&amp;amp;quot;

# rebind main key: C-u
unbind C-b
set -g prefix C-u
bind u send-prefix
bind C-u last-window
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The ability to have disparate applications with varied configuration
languages wrapped by a single, type safe, functional meta-language is
cool. If the idea of writing Nix code to generate your dotfiles is too
weird, you can always fall back to having it symlink your hand-rolled
dotfiles. If you prefer a hybrid, most home-manager modules have an
&amp;lt;code&amp;gt;extra&amp;lt;/code&amp;gt; option (or similar) to interleave arbitrary configuration in
the dotfiles it generates.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;layout&amp;quot;&amp;gt;Layout&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;My newly restructured &amp;lt;a href=&amp;quot;https://github.com/malloc47/config&amp;quot;&amp;gt;config repo&amp;lt;/a&amp;gt; is now laid out with the
following directories:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;/nixos/configuration.nix&amp;lt;/code&amp;gt; : general OS configuration that applies
to all hosts
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Imports &amp;lt;code&amp;gt;home.nix&amp;lt;/code&amp;gt; to build my home folder&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Imports overlays from &amp;lt;code&amp;gt;pkgs/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;hosts/&amp;lt;/code&amp;gt; : host specific configuration:
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Imports hardware configuration from &amp;lt;code&amp;gt;hardware/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Imports general NixOS configuration from &amp;lt;code&amp;gt;nixos/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Imports custom modules from &amp;lt;code&amp;gt;modules/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;hardware/&amp;lt;/code&amp;gt; : low-level configuration (file systems, kernel modules,
etc.) for use by individual hosts&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;config/home.nix&amp;lt;/code&amp;gt; + dotfiles
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Imports keyboard layout from &amp;lt;code&amp;gt;xkb/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Imports custom modules from &amp;lt;code&amp;gt;modules/&amp;lt;/code&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;modules/&amp;lt;/code&amp;gt; : my custom configuration module, and any future modules&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;personal/&amp;lt;/code&amp;gt; : private git submodule for non-public dotfiles&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;pkgs/&amp;lt;/code&amp;gt; : overlays for custom packages&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;xkb/&amp;lt;/code&amp;gt; : keyboard layouts&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;To bootstrap a new host after doing a vanilla install of NixOS, I need
to:&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;Generate the appropriate &amp;lt;code&amp;gt;hardware/&amp;lt;/code&amp;gt; file (or re-use an existing
one if the hardware matches).&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Customize a new &amp;lt;code&amp;gt;host/&amp;lt;/code&amp;gt; file, including the options defined in
&amp;lt;code&amp;gt;modules/settings.nix&amp;lt;/code&amp;gt; to match the needs of the new machine
(e.g. set a work email or change the default font size for HiDPI
screens).&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Following this, I generally symlink the &amp;lt;code&amp;gt;host/&amp;amp;lt;hostname&amp;amp;gt;.nix&amp;lt;/code&amp;gt; file
to &amp;lt;code&amp;gt;/etc/nixos/configuration.nix&amp;lt;/code&amp;gt; so that NixOS rebuilds don&amp;apos;t have
to be passed the file explicitly.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Finally, running &amp;lt;code&amp;gt;nixos-rebuild&amp;lt;/code&amp;gt; will construct the complete OS and
my home folder with the exact set of packages and dotfiles I&amp;apos;ve
defined for all of my machines.&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;Alternatively, I could inject the configuration into the machine prior
to doing a NixOS install or even build a custom NixOS ISO that
includes my configuration in the image. Since bootstrapping my
configuration is only something I&amp;apos;ve had to do once per platform, I
haven&amp;apos;t been compelled to optimize further yet.&amp;lt;/p&amp;gt;
&amp;lt;h1 id=&amp;quot;conclusion&amp;quot;&amp;gt;Conclusion&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;So far I&amp;apos;ve been happy with my NixOS setup; I do miss the ease of the
&amp;lt;a href=&amp;quot;https://aur.archlinux.org/&amp;quot;&amp;gt;AUR&amp;lt;/a&amp;gt; and the extensively documented &amp;lt;a href=&amp;quot;https://wiki.archlinux.org/&amp;quot;&amp;gt;ArchWiki&amp;lt;/a&amp;gt;. Perhaps the
most important change I&amp;apos;ve noticed is how much bolder I can be with
toying on bare hardware; the few times I&amp;apos;ve messed up my system, I
just boot back into the previous generation.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/jetty-jmx-in-clojure/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/jetty-jmx-in-clojure/"/>
    <title>Jetty JMX in Clojure</title>
    <updated>2015-02-16T06:35:22Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Embedded Jetty is one of the more popular servers for ring
applications.  &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Java_Management_Extensions&amp;quot;&amp;gt;JMX&amp;lt;/a&amp;gt; can be useful for poking around the guts of
Jetty, as well as making runtime config changes. Unfortunately,
enabling JMX for an embedded Jetty isn&amp;apos;t a straightforward config
change, and the process for doing so in Clojure is largely
undocumented. So this is the guide that I wish existed when I found
the need to profile Jetty. If you&amp;apos;d rather skip the commentary, I&amp;apos;ve
put up a &amp;lt;a href=&amp;quot;https://github.com/malloc47/jetty-jmx&amp;quot;&amp;gt;minimal clojure jmx-enabled server&amp;lt;/a&amp;gt; for perusal.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Most essentially, the version of Jetty that comes bundled in
&amp;lt;code&amp;gt;ring-jetty-adapter&amp;lt;/code&amp;gt; is &amp;lt;a href=&amp;quot;https://github.com/ring-clojure/ring/blob/master/ring-jetty-adapter/project.clj#L9&amp;quot;&amp;gt;too old&amp;lt;/a&amp;gt; (currently 7.6.13) to expose
meaningful JMX hooks. Thankfully there&amp;apos;s a &amp;lt;a href=&amp;quot;https://github.com/sunng87/ring-jetty9-adapter&amp;quot;&amp;gt;modern ring adapter&amp;lt;/a&amp;gt;
that you can add to your dependency list:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;[info.sunng/ring-jetty9-adapter &amp;amp;quot;0.8.1&amp;amp;quot;]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which serves as a drop-in replacement for the official
&amp;lt;code&amp;gt;ring-jetty-adapter&amp;lt;/code&amp;gt;. Another relevant dependency is Jetty&amp;apos;s JMX
artifact:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;[org.eclipse.jetty/jetty-jmx &amp;amp;quot;9.2.7.v20150116&amp;amp;quot;]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;jetty-jmx&amp;lt;/code&amp;gt; version should match with the version of
&amp;lt;code&amp;gt;jetty-server&amp;lt;/code&amp;gt; provided by &amp;lt;code&amp;gt;ring-jetty9-adapter&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While editing &amp;lt;code&amp;gt;project.clj&amp;lt;/code&amp;gt;, it&amp;apos;s important enable JMX on the JVM
level, and select a port:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;:jvm-opts [&amp;amp;quot;-Dcom.sun.management.jmxremote&amp;amp;quot;
           &amp;amp;quot;-Dcom.sun.management.jmxremote.ssl=false&amp;amp;quot;
           &amp;amp;quot;-Dcom.sun.management.jmxremote.authenticate=false&amp;amp;quot;
           &amp;amp;quot;-Dcom.sun.management.jmxremote.port=8001&amp;amp;quot;]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Finally, the running Jetty server must opt-in to JMX by pointing to
the appropriate &amp;amp;quot;MBean,&amp;amp;quot; which can be imported with:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(ns jetty-jmx.core
  (:require [ring.adapter.jetty9 :refer [run-jetty]])
  (:import (java.lang.management ManagementFactory)
           (org.eclipse.jetty.jmx MBeanContainer)))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The server can then be started with:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;clojure&amp;quot;&amp;gt;(let [mb-container (MBeanContainer. (ManagementFactory/getPlatformMBeanServer))]
    (doto (run-jetty app {:port 8000
                          :join? false})
      (.addEventListener mb-container)
      (.addBean mb-container)))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which attaches the MBean to the running Jetty server. Since the
&amp;lt;code&amp;gt;run-server&amp;lt;/code&amp;gt; command calls &amp;lt;code&amp;gt;.start&amp;lt;/code&amp;gt; on the &amp;lt;code&amp;gt;Server&amp;lt;/code&amp;gt; object before
returning it, it&amp;apos;s important to configure &amp;lt;code&amp;gt;:join? false&amp;lt;/code&amp;gt; to allow
thread execution to continue, preventing the following
&amp;lt;code&amp;gt;.addEventListener&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;.addBean&amp;lt;/code&amp;gt; from being blocked.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With all of this, it should now be possible to start the server and
connect to the JMX port using &amp;lt;code&amp;gt;jconsole&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;jconsole localhost:8001
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Relevant info will be under the &amp;lt;code&amp;gt;MBeans&amp;lt;/code&amp;gt; tab. Useful fields include&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;org.eclipse.jetty.util.thread.queuedthreadpool.threads
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;for how many threads are allocated, and&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;org.eclipse.jetty.util.thread.queuedthreadpool.queueSize
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;to find out how many requests are waiting on threads.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/10000-commits/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/10000-commits/"/>
    <title>10,000 Commits</title>
    <updated>2014-07-29T02:01:27Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Since finishing my dissertation, I decided to gather some metrics
across the related repositories. Pulling the raw number of commits
with (roughly) this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;find . -name .git
    | xargs -I {} git --git-dir={} log
                      --all
                      --author=$(whoami)
                      --pretty=format:&amp;amp;quot;%H&amp;amp;quot;
    | sort | uniq | wc -l
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;I realized that I&amp;apos;d crossed the 10,000 commit threshold right before
graduating. Which seemed appropriate.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While the Gladwellian &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Outliers_(book)&amp;quot;&amp;gt;10,000 hours&amp;lt;/a&amp;gt; heuristic (debatable as it may
be) for mastering a craft fits as a general cross-discipline measure,
I&amp;apos;d conjecture 10,000 commits is a more fitting measure for software
engineers. It&amp;apos;s difficult to imagine reaching 10,000 commits without
having gone through a full software lifecycle, probably more than
once. And counting commits instead of hours has the advantage of each
being a visible, presumably atomic, and (lightly) documented bit of
work, where the prerequisite (actually using/understanding version
control) is a good indicator of investment in the craft. For those of
us who may have exceeded 10,000 hours tinkering with &amp;amp;quot;programming&amp;amp;quot;
before finishing high school, having a goal that requires the
discipline to document your progress may be more helpful than 10,000
unstructured or undocumented hours of hacking.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Particularly when completing a CS Ph.D., commits to research software,
open source patches, version controlled manuscripts, research
notebooks, etc.---when taken together---are rarely going to number
much less than 10,000 if you&amp;apos;ve truly produced enough work to
graduate.  Similarly, though I&amp;apos;ve not stayed in a junior software
developer role long enough to be promoted, crossing the 10,000
threshold sounds more than ample evidence of outgrowing the role.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;When a software project hits 10,000 commits---no matter how ugly it
might be---it&amp;apos;s easy to imagine it being fleshed-out and mature.  I&amp;apos;d
like to think engineers might be too.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/latex-snippet-literal-one-liners/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/latex-snippet-literal-one-liners/"/>
    <title>LaTeX Snippet: (Literal) One Liners</title>
    <updated>2013-04-03T03:32:20Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;There are some truly &amp;lt;a href=&amp;quot;https://tex.stackexchange.com/questions/33417/adjust-font-size-on-the-fly&amp;quot;&amp;gt;impressive&amp;lt;/a&amp;gt; LaTeX solutions for doing
PowerPoint-style font-resizing to fit into a fixed width box.  I
recently had need of something more simple: print text on &amp;lt;em&amp;gt;one line
only&amp;lt;/em&amp;gt;, scaling the size down instead of allowing it to wrap.  The
following LaTeX snippet does exactly this, triggered only if the font
width (before wrapping) exceeds &amp;lt;code&amp;gt;\textwidth&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;latex&amp;quot;&amp;gt;{
  \def\formattedtext{The no-wrap text to scale}%
  \newdimen{\namewidth}%
  \setlength{\namewidth}{\widthof{\formattedtext}}%
  \ifthenelse{\lengthtest{\namewidth &amp;amp;lt; \textwidth}}%
  {\formattedtext}% do nothing if shorter than text width
  {\resizebox{\textwidth}{!}{\formattedtext}}% scale down
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This requires&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;latex&amp;quot;&amp;gt;\usepackage{xifthen}
\usepackage{graphicx}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;to handle the &amp;lt;code&amp;gt;\ifthenelse&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;\lengthtest&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;\resizebox&amp;lt;/code&amp;gt;
statements.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;It works like you might expect: check the width of the text, and then
use &amp;lt;code&amp;gt;\resizebox&amp;lt;/code&amp;gt; to scale it down, if needed.  Such logic isn&amp;apos;t always
obvious in LaTeX: arbitrary &amp;lt;code&amp;gt;def&amp;lt;/code&amp;gt;s cannot store length information, so
you have to set the type of the &amp;lt;code&amp;gt;\namewidth&amp;lt;/code&amp;gt; variable as a dimension
before you can assign/test it as a length.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;As with most helpful things in LaTeX, we can wrap it up in a reusable
macro:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;latex&amp;quot;&amp;gt;\newcommand{\oneline}[1]{{&amp;amp;quot;{%&amp;amp;quot; }}
  \newdimen{\namewidth}%
  \setlength{\namewidth}{\widthof{#1}}%
  \ifthenelse{\lengthtest{\namewidth &amp;amp;lt; \textwidth}}%
  {#1}%
  {\resizebox{\textwidth}{!}{#1}}%
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which allows&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;latex&amp;quot;&amp;gt;\oneline{\Huge{The no-wrap text to scale}}

\oneline{\Huge{The quick brown fox jumped over the lazy dog, over and over and over and over again.}}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;On any reasonable-sized page width, these two lines will not wrap, but
the longer line will be stretched horizontally to fit in the available space.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You can find a fully-working (as of TeXLive 2012) gist &amp;lt;a href=&amp;quot;https://gist.github.com/malloc47/5298181&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/tech-company-locations/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/tech-company-locations/"/>
    <title>Tech Company Locations (North America)</title>
    <updated>2013-02-24T21:09:31Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Since I&amp;apos;m soon to be on the technology job market, I decided to get
a handle on where the major technology companies were located.  After
spending some quality time going back and forth bettween the &amp;quot;Career&amp;quot;
sections of different companies and Google Maps, I assembled this:&amp;lt;/p&amp;gt;
&amp;lt;iframe width=&amp;quot;620&amp;quot; height=&amp;quot;500&amp;quot; frameborder=&amp;quot;0&amp;quot; scrolling=&amp;quot;no&amp;quot; marginheight=&amp;quot;0&amp;quot; marginwidth=&amp;quot;0&amp;quot; src=&amp;quot;//maps.google.com/maps/ms?msid=208032600690328075247.0004d67c37273c82e2363&amp;amp;amp;msa=0&amp;amp;amp;ie=UTF8&amp;amp;amp;t=m&amp;amp;amp;ll=33.578015,-96.767578&amp;amp;amp;spn=34.833124,56.25&amp;amp;amp;z=4&amp;amp;amp;output=embed&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;p&amp;gt;There are a number of disclaimers here:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;This is geared primarily toward locations that emphasize
    software engineering roles.  I tried to filter accordingly if there
    are few/no engineering jobs listed for a paricular location, but
    that may not be perfect either.&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;Few companies provided the exact address (Microsoft being one of
    the exceptions) for every one of their locations, so if Google
    Maps searches failed, then I just approximated.&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;This is certainly not exhaustive; many companies (namely Amazon)
    have many subsidiaries under different branding, which may or may
    not have any engineering roles.&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;This doesn&amp;apos;t include data centers, retail stores, etc.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;mailto:malloc47@gmail.com?subject=Tech Company Locations&amp;quot;&amp;gt;Let
me know&amp;lt;/a&amp;gt; if you see any gross errors, or would like me to include
any other companies with more than one location.  You can get a better
view
on &amp;lt;a href=&amp;quot;//maps.google.com/maps/ms?msa=0&amp;amp;amp;msid=208032600690328075247.0004d67c37273c82e2363&amp;amp;amp;ie=UTF8&amp;amp;amp;t=m&amp;amp;amp;ll=33.560275,-96.753709&amp;amp;amp;spn=28.255532,51.3448&amp;amp;amp;source=embed&amp;quot;
style=&amp;quot;color:#0000FF;text-align:left&amp;quot;&amp;gt;Google Maps&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/laptops-are-the-stenotypes-of-software-engineers/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/laptops-are-the-stenotypes-of-software-engineers/"/>
    <title>Laptops are the Stenotypes of Software Engineers</title>
    <updated>2013-02-18T04:40:07Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Increasingly, I&amp;apos;ve been asked variants on the question &amp;amp;quot;what will
happen to desktops/laptops,&amp;amp;quot; particularly in light of the
proliferation of smartphones and tablets.  This has resulted in
several good conversations, and I&amp;apos;ve begun to use the following
analogy when discussing this with colleagues in non-engineering
disciplines:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Laptop computers will become the stenotypes of software engineers.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Stenotype&amp;quot;&amp;gt;stenotype&amp;lt;/a&amp;gt; is a niche device used by stenographers (most
prominently, court reporters) to transcribe dialog in real-time at
blindingly-fast words-per-minute rates.  Fellow Emacs users might
appreciate how the stenotype works: instead of typing single letters,
multiple keys are &amp;amp;quot;chorded&amp;amp;quot; together to allow many more combinations
with many fewer keys.  And instead of producing single letters, many
of these combinations produce syllables or whole words.  These
physical optimizations are coupled with conventions among
stenographers to wantonly omit or abbreviate words where there is
little ambiguity of meaning, which further improves efficiency---the
fewer characters put to a page, the less chance of typos.  This leads
to the output of the stenotype being difficult to read by those who
are not well-versed in the conventions (called &amp;amp;quot;theories&amp;amp;quot;) used by
stenographers.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;One could describe the typical QWERTY keyboard as the antithesis of
the stenotype.  Designed to reduce jams in the old typewriting
systems---a constraint clearly nonexistent in modern
hardware---mainstream keyboards are considered more accessible
compared with a stenotype.  However, even considering later
iterations, such as the &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Dvorak_Simplified_Keyboard&amp;quot;&amp;gt;Dvorak&amp;lt;/a&amp;gt; layout, these keyboards cannot
hope to match the ruthless efficiency of a stenotype when used in
real-time transcription work.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Few would reach for a stenotype to write a letter to their mother
(unless she was a stenographer herself!), and no trained court
reporter would care to wonder into the courtroom with a QWERTY
keyboard.  Despite digital recorders making inroads into court
reporting and closed caption transcription, stenotypes are still
available (hint: &amp;lt;a href=&amp;quot;https://www.ebay.com/sch/i.html?_trksid=p5197.m570.l1313&amp;amp;amp;_nkw=stenotype&amp;amp;amp;_sacat=0&amp;amp;amp;_from=R40&amp;quot;&amp;gt;ebay&amp;lt;/a&amp;gt;), persisting thanks to an ingrained base of
stenographers who remain ruthlessly efficient at these
highly-specialized tasks.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Which brings us back to computing.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Software engineers are not your average user.  We don&amp;apos;t have an
average computing workload and have a completely disparate set of
tools and conventions.  Dell didn&amp;apos;t even try to lampshade this fact
with their &amp;lt;a href=&amp;quot;https://content.dell.com/us/en/gen/d/campaigns/xps-linux-laptop&amp;quot;&amp;gt;Sputnik&amp;lt;/a&amp;gt; Ubuntu laptop aimed squarely at developers.
And, while tablets have proven to be capable of everything from
typical computing tasks to &amp;lt;a href=&amp;quot;https://pythonforios.com/&amp;quot;&amp;gt;basic software development&amp;lt;/a&amp;gt;,&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;If it doesn&amp;apos;t have a keyboard, I feel that my thoughts are being
forced out through a straw.&amp;lt;br /&amp;gt;
---Joey Hess&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;https://www.fastcompany.com/3004563/2013-when-tablets-beat-laptops&amp;quot;&amp;gt;immanent death&amp;lt;/a&amp;gt; of the laptop is greatly exaggerated; after
all, the stenotype lives on to this day.  However, the fate of the
laptop &amp;lt;em&amp;gt;as we know it&amp;lt;/em&amp;gt;---available in every imaginable color, style,
shape, size, and brandishing shiny logos to reinforce its reputation
as a status symbol---is less certain.  This fact was made more stark
for me when I realized that installing &amp;lt;a href=&amp;quot;https://www.android-x86.org/&amp;quot;&amp;gt;Android x86&amp;lt;/a&amp;gt; on my Eee PC
gave it more in common with modern computing platforms than my primary
development laptop (Thinkpad x120e with Arch Linux and the minimal
xmonad window manager).  And I know I&amp;apos;m not the only developer who
has, consciously or unconsciously, increased the specialization of my
desktops/laptops while using smartphones/tablets for non-work related
activities.  Who really wants to pull out and boot up a laptop for
light internet reading when you&amp;apos;ve got an instant-on smartphone or
tablet within reach?  I&amp;apos;m becoming more convinced that this is what
the real &amp;amp;quot;death&amp;amp;quot; of the laptop looks like.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For software engineers, the role of laptops (and desktops even moreso)
is slowly morphing into one similar to that of stenotypes.  It&amp;apos;s
arguable that this is inevitable: artists don&amp;apos;t use college-rule
paper, chemists don&amp;apos;t conduct titrations in a coffee mug, and
firefighters don&amp;apos;t roll up in a corolla to put out house fires.
Professions evolve better and more efficient methodology, and when
professionals outgrow the prevailing tools available to consumers,
they develop new tools.  This has already been well underway on the
software side---you won&amp;apos;t find lawyers writing briefs with &amp;lt;code&amp;gt;vim&amp;lt;/code&amp;gt;,
after all.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If consumer computing devices become more recalcitrant for software
engineers, it makes sense that a professional-grade tool should fill
in the gap.  The most natural candidate is the form factors we already
have: laptops and desktops.  But that certainly doesn&amp;apos;t limit
innovation to current devices---a positive side effect of this &amp;amp;quot;death&amp;amp;quot;
of laptops is that it provides a great opportunity to rethink what
sort of device would benefit developers most, without being strictly
constrained by a 1980s design that was intended for general computing.
And this prospect may not be as far away as it might seem, given the
recent rise of &amp;lt;a href=&amp;quot;https://www.hackthings.com/brace-yourself-here-come-the-hardware-startups/&amp;quot;&amp;gt;hardware startups&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The next time you pull out a laptop in a coffee shop, I don&amp;apos;t
anticipate you&amp;apos;ll get the same quizzical looks you might receive if
you brought a stenotype with you.  But, like the stenotype, I do think
that the proliferation of tablets and other more consumer-oriented
devices will necessitate a professional class of devices that are less
common and more specialized.  And in the meantime, that might mean the
stylishness of laptops will begin to wane.  I&amp;apos;m okay with that.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;[Incidentally, you can turn a conventional keyboard into a stenotype-like device with &amp;lt;a href=&amp;quot;https://stenoknight.com/wiki/Main_Page&amp;quot;&amp;gt;Plover&amp;lt;/a&amp;gt;,
an open-source stenotype software package.]&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/producing-latex-from-numpy-arrays/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/producing-latex-from-numpy-arrays/"/>
    <title>Producing LaTeX from NumPy Arrays</title>
    <updated>2013-01-29T17:13:23Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;For my comprehensive exam, I needed to quickly convert some NumPy
arrays into nice-looking LaTeX &amp;lt;code&amp;gt;array&amp;lt;/code&amp;gt; elements.  The TeX Stack
Exchange site has a good &amp;lt;a href=&amp;quot;https://tex.stackexchange.com/questions/54990/convert-numpy-array-into-tabular&amp;quot;&amp;gt;answer&amp;lt;/a&amp;gt; for &amp;lt;code&amp;gt;tabular&amp;lt;/code&amp;gt; environments, but
wasn&amp;apos;t quite suited to the &amp;lt;code&amp;gt;array&amp;lt;/code&amp;gt; environment.  The usual answer here
would be &amp;lt;a href=&amp;quot;https://mpastell.com/pweave/&amp;quot;&amp;gt;Pweave&amp;lt;/a&amp;gt; but, being short on time, I ended up rolling my
own function instead:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;python&amp;quot;&amp;gt;def to_latex(a,label=&amp;apos;A&amp;apos;):
    sys.stdout.write(&amp;apos;\[ &amp;apos;
                     + label
                     + &amp;apos; = \\left| \\begin{array}{&amp;apos;
                     + (&amp;apos;c&amp;apos;*a.shape[1])
                     + &amp;apos;}\n&amp;apos; )
    for r in a:
        sys.stdout.write(str(r[0]))
        for c in r[1:]:
            sys.stdout.write(&amp;apos; &amp;amp;amp; &amp;apos;+str(c))
        sys.stdout.write(&amp;apos;\\\\\n&amp;apos;)
    sys.stdout.write(&amp;apos;\\end{array} \\right| \]\n&amp;apos;)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Here&amp;apos;s an incomplete snippet of it in action, where I convolve an
array &amp;lt;code&amp;gt;t&amp;lt;/code&amp;gt; with four different filters, producing a latex formula for
each result:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;python&amp;quot;&amp;gt;filters = ((&amp;apos;A \\oplus H_1&amp;apos;,h1)
           , (&amp;apos;A \\oplus H_2&amp;apos;,h2)
           , (&amp;apos;A \\oplus H_3&amp;apos;,h3)
           , (&amp;apos;A \\oplus H_4&amp;apos;,h4))

for label,f in filters:
    t2 = scipy.signal.convolve(t,f,&amp;apos;same&amp;apos;)
    to_latex(t2.astype(&amp;apos;uint8&amp;apos;),label=label)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;I&amp;apos;ll likely get around to expanding this into a full package sometime
in the future, since there&amp;apos;s a lot that is hard coded (the &amp;lt;code&amp;gt;\[ \]&amp;lt;/code&amp;gt;
environment, stringification of the array, the fact that all columns
are centered, etc.).  A gist of the function is available &amp;lt;a href=&amp;quot;https://gist.github.com/4665827&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/pythonbrew-opencv-debian/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/pythonbrew-opencv-debian/"/>
    <title>pythonbrew+opencv+debian</title>
    <updated>2013-05-17T14:25:14Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;There are a number of ways to go about building a modern development
environment for scientific computing and computer vision in python.
If you&amp;apos;re used to developing on bleeding-edge, however, the latest
debian stable makes it a chore to get started with the latest and
greatest.  It ships with &amp;lt;code&amp;gt;python2.6&amp;lt;/code&amp;gt; instead of 2.7, and &amp;lt;a href=&amp;quot;https://opencv.org/&amp;quot;&amp;gt;opencv&amp;lt;/a&amp;gt;
is notoriously out of date in a number of distributions, debian
included.  I typically use Arch, but the server-class machines I have
access to were running debian, so I had to bootstrap my setup into
this environment.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Challenge accepted.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Thankfully, &amp;lt;a href=&amp;quot;https://github.com/utahta/pythonbrew&amp;quot;&amp;gt;pythonbrew&amp;lt;/a&amp;gt; (or &amp;lt;a href=&amp;quot;https://github.com/saghul/pythonz&amp;quot;&amp;gt;pythonz&amp;lt;/a&amp;gt;) comes to the rescue by
making it easy to handle multiple pythons for a single account
(without having to install them system-wide) as well as providing
wrappers around &amp;lt;a href=&amp;quot;https://virtualenv.pypa.io/en/latest/&amp;quot;&amp;gt;virtualenv&amp;lt;/a&amp;gt;.  However, not everything is rosy.
The python you choose has to be built with shared libraries if you
want to install opencv later:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;pythonbrew install --configure=&amp;amp;quot;--enable-shared&amp;amp;quot; 2.7.3
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;After this, you can bootstrap a &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; as usual&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;pythonbrew venv init
pythonbrew venv create debian
pythonbrew venv use debian
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;and install any requisite stuff you might need (minimum numpy/scipy)&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;pip install numpy
pip install scipy
pip install pymorph
pip install matplotlib
pip install distutils
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Unfortunately, there&amp;apos;s no such &amp;lt;code&amp;gt;pip&amp;lt;/code&amp;gt; package for opencv.  Thankfully,
the &amp;lt;a href=&amp;quot;http://opencv.willowgarage.com/wiki/InstallGuide%20%3A%20Debian&amp;quot;&amp;gt;debian installation guide&amp;lt;/a&amp;gt; isn&amp;apos;t too far out of date, and many
of the listed packages to &amp;lt;code&amp;gt;apt-get&amp;lt;/code&amp;gt; are still relevant.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;wget http://downloads.sourceforge.net/project/opencvlibrary/opencv-unix/2.4.3/OpenCV-2.4.3.tar.bz2
tar xjvf OpenCV-2.4.3.tar.bz2
cd OpenCV-2.4.3
mkdir {build,release}
cd release
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;At this point, we need to delve into where &amp;lt;code&amp;gt;pythonbrew&amp;lt;/code&amp;gt; puts all its
related files to configure opencv correctly.  First, your installed
python will be available in one of two places (here python 2.7.3 is
used as an example):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/.pythonbrew/venvs/Python-2.7.3/{venv-name}/bin/python
~/.pythonbrew/pythons/Python-2.7.3/bin/python
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;All &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt;s based on a particular version of python will have a
copy of that python binary for use in their own isolated environment.
In addition, the &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; has an &amp;lt;code&amp;gt;include&amp;lt;/code&amp;gt; directory that you
should use, since all your additional packages installed into the
&amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; will place their headers in this directory:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/.pythonbrew/venvs/Python-2.7.3/{venv-name}/include/python2.7
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The hitch, however, is that the &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; does not have a
copy/symlink of the shared library we specifically built when first
compiling python using &amp;lt;code&amp;gt;pythonbrew&amp;lt;/code&amp;gt;, unlike a typical native python
install.  This means that &amp;lt;code&amp;gt;cmake&amp;lt;/code&amp;gt;&amp;apos;s approach to locate this library
will fail.  Thus we must point opencv to this&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/.pythonbrew/pythons/Python-2.7.3/lib/libpython2.7.so
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;for it to build corectly.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Speaking of &amp;lt;code&amp;gt;cmake&amp;lt;/code&amp;gt;, there is a bug in the &amp;lt;code&amp;gt;cmake&amp;lt;/code&amp;gt; included in debian
that prevents it from building opencv correctly.  I was lazy and
simply grabbed a binary of the latest &amp;lt;code&amp;gt;cmake&amp;lt;/code&amp;gt;,&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;wget http://www.cmake.org/files/v2.8/cmake-2.8.9-Linux-i386.tar.gz
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which worked on my debian build, but it&amp;apos;s better to compile it if you
plan to continue using it for more than a one-off build.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Finally, understanding opencv&amp;apos;s &amp;lt;code&amp;gt;cmake&amp;lt;/code&amp;gt; flags is important for getting
everything stitched together:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;PYTHON_EXECUTABLE=~/.pythonbrew/venvs/Python-2.7.3/{venv-name}/bin/python
PYTHON_INCLUDE_DIR=~/.pythonbrew/venvs/Python-2.7.3/debian/include/python2.7
PYTHON_LIBRARY=~/.pythonbrew/pythons/Python-2.7.3/lib/libpython2.7.so
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Additionally, if you find that numpy isn&amp;apos;t autodetected, you can specify&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;PYTHON_NUMPY_INCLUDE_DIR=~/.pythonbrew/venvs/Python-2.7.3/debian/lib/python2.7/site-packages/numpy/core/include
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;You can also specify your &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; path to install the python libraries&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;PYTHON_PACKAGES_PATH=~/.pythonbrew/venvs/Python-2.7.3/{venv-name}/lib/python2.7/site-packages
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;or just symlink/copy the resulting &amp;lt;code&amp;gt;cv2.so&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;cv.py&amp;lt;/code&amp;gt; files there later.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Putting it all together, I used this command to generate the makefile
which compiles correctly against &amp;lt;code&amp;gt;pythonbrew&amp;lt;/code&amp;gt;&amp;apos;s python (where &amp;lt;code&amp;gt;debian&amp;lt;/code&amp;gt;
is my &amp;lt;code&amp;gt;virtualenv&amp;lt;/code&amp;gt; name):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;~/cmake-2.8.9-Linux-i386/bin/cmake \
-D CMAKE_INSTALL_PREFIX=../build \
-D BUILD_NEW_PYTHON_SUPPORT=ON \
-D BUILD_PYTHON_SUPPORT=ON \
-D BUILD_EXAMPLES=OFF \
-D PYTHON_EXECUTABLE=~/.pythonbrew/venvs/Python-2.7.3/debian/bin/python \
-D PYTHON_INCLUDE_DIR=~/.pythonbrew/venvs/Python-2.7.3/debian/include/python2.7 \
-D PYTHON_LIBRARY=~/.pythonbrew/pythons/Python-2.7.3/lib/libpython2.7.so \
-D PYTHON_NUMPY_INCLUDE_DIR=~/.pythonbrew/venvs/Python-2.7.3/debian/lib/python2.7/site-packages/numpy/core/include \
-D PYTHON_PACKAGES_PATH=~/.pythonbrew/venvs/Python-2.7.3/debian/lib/python2.7/site-packages \
../
make
make install
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Depending on what you&amp;apos;re doing, there may be other tricks with
&amp;lt;code&amp;gt;LD_LIBRARY_PATH&amp;lt;/code&amp;gt; to make specific things work, but your
&amp;lt;code&amp;gt;pythonbrew&amp;lt;/code&amp;gt;ed python should be primed to access opencv from here.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/anatomy-of-a-chrome-extension/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/anatomy-of-a-chrome-extension/"/>
    <title>Anatomy of a Chrome Extension</title>
    <updated>2012-09-15T19:26:12Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;I launched &amp;lt;a href=&amp;quot;http://nonpartisan.me&amp;quot;&amp;gt;nonpartisan.me&amp;lt;/a&amp;gt; a few weeks back, which exists
primarily in the form of a Google Chrome extension (there&amp;apos;s a Firefox
add-on too).  Since I released it with all of the &amp;lt;a href=&amp;quot;https://github.com/malloc47/nonpartisan.me&amp;quot;&amp;gt;source&amp;lt;/a&amp;gt;, this
makes it a great time to dissect the (very simple) code.  As you will
notice from the site and the small bit of &amp;lt;a href=&amp;quot;https://charlestoncitypaper.com/sick-of-politics-on-facebook-try-this-browser-tool/&amp;quot;&amp;gt;press&amp;lt;/a&amp;gt; it picked up,
&amp;lt;code&amp;gt;nonpartisan.me&amp;lt;/code&amp;gt; has a very simple premise: filter out political
keywords from the various newsfeeds (specifically Facebook, Twitter,
and Google+).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This was my first attempt at a Chrome extension, and it&amp;apos;s surprisingly
straightforward.  All such extensions require a &amp;lt;code&amp;gt;manifest.json&amp;lt;/code&amp;gt;, which
looks like this for &amp;lt;code&amp;gt;nonpartisan.me&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;javascript&amp;quot;&amp;gt;{
    &amp;amp;quot;name&amp;amp;quot;             : &amp;amp;quot;nonpartisan.me&amp;amp;quot;,
    &amp;amp;quot;version&amp;amp;quot;          : &amp;amp;quot;0.2.1&amp;amp;quot;,
    &amp;amp;quot;manifest_version&amp;amp;quot; : 2,
    &amp;amp;quot;description&amp;amp;quot;      : &amp;amp;quot;Removes partisanship from your news feeds&amp;amp;quot;,
    &amp;amp;quot;icons&amp;amp;quot;            : { &amp;amp;quot;16&amp;amp;quot;: &amp;amp;quot;icon16.png&amp;amp;quot;,
                           &amp;amp;quot;48&amp;amp;quot;: &amp;amp;quot;icon48.png&amp;amp;quot;,
                          &amp;amp;quot;128&amp;amp;quot;: &amp;amp;quot;icon128.png&amp;amp;quot; },
    &amp;amp;quot;homepage_url&amp;amp;quot;     : &amp;amp;quot;https://nonpartisan.me&amp;amp;quot;,
    &amp;amp;quot;page_action&amp;amp;quot;      : {&amp;amp;quot;default_icon&amp;amp;quot; : &amp;amp;quot;icon48.png&amp;amp;quot;,
                          &amp;amp;quot;default_title&amp;amp;quot;: &amp;amp;quot;nonpartisan&amp;apos;ed&amp;amp;quot; },
    &amp;amp;quot;permissions&amp;amp;quot;      : [&amp;amp;quot;tabs&amp;amp;quot;,
                          &amp;amp;quot;https://www.facebook.com/&amp;amp;quot;,
                          &amp;amp;quot;https://www.twitter.com/&amp;amp;quot;,
                          &amp;amp;quot;https://plus.google.com/&amp;amp;quot;],
    &amp;amp;quot;options_page&amp;amp;quot;     : &amp;amp;quot;options.html&amp;amp;quot;,
    &amp;amp;quot;content_scripts&amp;amp;quot;  : [
    {
        &amp;amp;quot;matches&amp;amp;quot;: [&amp;amp;quot;*://*.facebook.com/*&amp;amp;quot;],
        &amp;amp;quot;js&amp;amp;quot;     : [&amp;amp;quot;jquery.js&amp;amp;quot;,&amp;amp;quot;common.js&amp;amp;quot;,&amp;amp;quot;fb.js&amp;amp;quot;,&amp;amp;quot;nonpartisan.js&amp;amp;quot;],
        &amp;amp;quot;run_at&amp;amp;quot; : &amp;amp;quot;document_end&amp;amp;quot;
    },
    {
        &amp;amp;quot;matches&amp;amp;quot;: [&amp;amp;quot;*://twitter.com/*&amp;amp;quot;],
        &amp;amp;quot;js&amp;amp;quot;     : [&amp;amp;quot;jquery.js&amp;amp;quot;,&amp;amp;quot;common.js&amp;amp;quot;,&amp;amp;quot;tw.js&amp;amp;quot;,&amp;amp;quot;nonpartisan.js&amp;amp;quot;],
        &amp;amp;quot;run_at&amp;amp;quot; : &amp;amp;quot;document_end&amp;amp;quot;
    },
    {
        &amp;amp;quot;matches&amp;amp;quot;: [&amp;amp;quot;*://plus.google.com/*&amp;amp;quot;],
        &amp;amp;quot;js&amp;amp;quot;     : [&amp;amp;quot;jquery.js&amp;amp;quot;,&amp;amp;quot;common.js&amp;amp;quot;,&amp;amp;quot;gp.js&amp;amp;quot;,&amp;amp;quot;nonpartisan.js&amp;amp;quot;],
        &amp;amp;quot;run_at&amp;amp;quot; : &amp;amp;quot;document_end&amp;amp;quot;
    }],
    &amp;amp;quot;background&amp;amp;quot;: {&amp;amp;quot;scripts&amp;amp;quot;   : [&amp;amp;quot;common.js&amp;amp;quot;,&amp;amp;quot;background.js&amp;amp;quot;],
                   &amp;amp;quot;persistent&amp;amp;quot;: false }
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The real meat here is &amp;lt;code&amp;gt;content_scripts&amp;lt;/code&amp;gt;, which lists the javascript we
wish to trigger after a page is loaded, &amp;lt;code&amp;gt;greasemonkey&amp;lt;/code&amp;gt;-style.  A
particularly nice feature of content scripts are that they work in an
isolated environment separate from any javascript that the page itself
may include.  Thus we can add &amp;lt;code&amp;gt;jquery&amp;lt;/code&amp;gt; to the list of javascript that
is run without fear of clashing with a page&amp;apos;s global namespace.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You can think of every element in the &amp;lt;code&amp;gt;&amp;amp;quot;js&amp;amp;quot;&amp;lt;/code&amp;gt; array as a separate
&amp;lt;code&amp;gt;&amp;amp;lt;script&amp;amp;gt;&amp;lt;/code&amp;gt; tag in an &amp;lt;code&amp;gt;HTML&amp;lt;/code&amp;gt; page, so the files are loaded in the given
order, all into a single namespace.  Rather clumsily, I chose to
simply put a callback module (which is called &amp;lt;code&amp;gt;plugin&amp;lt;/code&amp;gt; here) in the
individual &amp;lt;code&amp;gt;fb.js&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;tw.js&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;gp.js&amp;lt;/code&amp;gt; files which is then used by
the core component, &amp;lt;code&amp;gt;nonpartisan.js&amp;lt;/code&amp;gt;, as a simple means of avoiding
any hard-coded per-site values in the actual filtering code.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With this, and the pseudo-regex &amp;lt;code&amp;gt;&amp;amp;quot;matches&amp;amp;quot;&amp;lt;/code&amp;gt; field that specifies which
pages trigger the content script, we can run arbitrary code on
websites we specify.  For &amp;lt;code&amp;gt;nonpartisan.me&amp;lt;/code&amp;gt;, the filtering code looks
like this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;javascript&amp;quot;&amp;gt;&amp;amp;quot;use strict&amp;amp;quot;;
var nonpartisan = function(plugin) {

    function nonpartisan (watch,parent,keywords) {
        function kill (parent,removeList){
            $(parent).each(function () {
                var el = $(this);
                if(el.css(&amp;apos;display&amp;apos;) !== &amp;apos;none&amp;apos;) {
                    el.find(&amp;apos;*&amp;apos;).each(function () {
                        var toCheck = $(this).text().toLowerCase();
                        if(toCheck.length &amp;amp;gt; 0 &amp;amp;amp;&amp;amp;amp;
                           (removeList.some(function (value) {
                               return (toCheck.search(&amp;amp;quot;\\b&amp;amp;quot;+value.toLowerCase()+&amp;amp;quot;\\b&amp;amp;quot;) &amp;amp;gt;=0);
                           }))
                          ) {
                            el.css({&amp;apos;display&amp;apos;:&amp;apos;none&amp;apos;});
                            return false;
                        }
                    });
                }
            });
        }

        if($(parent) &amp;amp;amp;&amp;amp;amp; $(watch)) {
            var numChildren = $(parent).children().length;
            setInterval(function () {
                var newNumChildren = $(parent).children().length;
                if(numChildren !== newNumChildren) {
                    kill(parent,keywords);
                    numChildren = newNumChildren;
                }
            },
                        500);
            kill(parent,keywords);
        }
    }

    // get parameters from plugin and trigger nonpartisan() here...

}(plugin);
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The first chunk--the &amp;lt;code&amp;gt;kill&amp;lt;/code&amp;gt; function--works as advertised: given a
parent element and a set of keywords, the function iterates over every
child element and determines if any of the nested elements within
(i.e. &amp;lt;code&amp;gt;el.find(&amp;apos;*&amp;apos;)&amp;lt;/code&amp;gt;) contains any of the keywords.  Instead of
deleting &amp;lt;code&amp;gt;DOM&amp;lt;/code&amp;gt; nodes, which may break the page&amp;apos;s own javascript (I
discovered this the hard way), it&amp;apos;s easier to instead call
&amp;lt;code&amp;gt;el.css({&amp;apos;display&amp;apos;:&amp;apos;none});&amp;lt;/code&amp;gt; to simply hide unwanted elements.  For
efficiency, the &amp;lt;code&amp;gt;forEach&amp;lt;/code&amp;gt; terminates as soon any any nested child
returns a match, potentially saving a small amount of needless
searching.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The second chunk starts a timer (if indeed the parent is even found on
the current page) that checks if the number of children of the parent
element has changed and, if so, re-triggers the filtering process to
determine if there are any new children to be hidden.  This helps
handle &amp;lt;code&amp;gt;AJAX&amp;lt;/code&amp;gt;-driven sites, like the &amp;amp;quot;infinite scrolling&amp;amp;quot; facebook
newsfeed, which may mutate the &amp;lt;code&amp;gt;DOM&amp;lt;/code&amp;gt; at any time.  Both of these
functions are wrapped up into another easy-to-call function inside of
the high-level &amp;lt;code&amp;gt;nonpartisan&amp;lt;/code&amp;gt; module.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And that really is all there is to a typical &amp;lt;code&amp;gt;greasemonkey&amp;lt;/code&amp;gt;-like
Chrome extension, but that&amp;apos;s certainly not the end of what a complete
and helpful extension can provide.  The trickier bit is persisting
configuration options.  The downside of sandboxing content scripts is
that they exist in a transient execution context, meaning there&amp;apos;s no
&amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt; to persist program options.  The details of the
plumbing used to kick-off the process and handle options were omitted
from the above snippet, so we&amp;apos;ll dig more into this now to illustrate
how to handle persistent options.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Chrome provides a nice solution to the problem of not having
&amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt; available to content scripts by providing a
&amp;lt;code&amp;gt;background&amp;lt;/code&amp;gt; script which &amp;lt;em&amp;gt;does&amp;lt;/em&amp;gt; have its own &amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt;, which it
can transmit to a content script via the &amp;lt;code&amp;gt;chrome.extension.onMessage&amp;lt;/code&amp;gt;
listener.  We can then fill in the omitted component of the above
snippet with:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;javascript&amp;quot;&amp;gt;chrome.extension.sendMessage({method: &amp;amp;quot;config&amp;amp;quot;}, function (response) {
    if(!response.sites[plugin.site]) return;
    var l = response.filter;
    if(l &amp;amp;amp;&amp;amp;amp; l.length&amp;amp;gt;0) {
        plugin.cb(l,nonpartisan);
    }
    // get default values from common.js
    else {
        l = [];
        for(var index in choices) {
            l = l.concat(choices[index]);
        }
        plugin.cb(l,nonpartisan);
    }
});
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This sends a message, requesting &amp;lt;code&amp;gt;&amp;amp;quot;config&amp;amp;quot;&amp;lt;/code&amp;gt; from the &amp;lt;code&amp;gt;background.js&amp;lt;/code&amp;gt;
script, which returns, among other things, the list of keywords we
wish to filter.  This list was saved in &amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt; in
&amp;lt;code&amp;gt;background.js&amp;lt;/code&amp;gt;&amp;apos;s execution context.  Recall that &amp;lt;code&amp;gt;plugin&amp;lt;/code&amp;gt; is the
module that specifies the particular settings for the page being
filtered.  Thus we pass along the list of words to filter and the
&amp;lt;code&amp;gt;nonpartisan()&amp;lt;/code&amp;gt; callback function to the &amp;lt;code&amp;gt;plugin&amp;lt;/code&amp;gt; module, and it
subsequently executes &amp;lt;code&amp;gt;nonpartisan()&amp;lt;/code&amp;gt; on the appropriate elements on
the &amp;lt;code&amp;gt;DOM&amp;lt;/code&amp;gt;.  The &amp;lt;code&amp;gt;background.js&amp;lt;/code&amp;gt; file used in &amp;lt;code&amp;gt;nonpartisan.me&amp;lt;/code&amp;gt; is a bit
more &amp;lt;a href=&amp;quot;https://github.com/malloc47/nonpartisan.me/blob/master/chrome/background.js&amp;quot;&amp;gt;involved&amp;lt;/a&amp;gt;, but it nonetheless essentially acts as a broker,
converting Chrome&amp;apos;s internal message-passing API calls to
&amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt; requests.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Of course, there&amp;apos;s only so much utility to be gained from
&amp;lt;code&amp;gt;localStorage&amp;lt;/code&amp;gt; without supplying the user with the ability to
configure the various options that may be saved in therein.  This is
done by a typical &amp;lt;code&amp;gt;html&amp;lt;/code&amp;gt; page, specified by &amp;lt;code&amp;gt;&amp;amp;quot;options_page&amp;amp;quot;&amp;lt;/code&amp;gt;.  Since
there&amp;apos;s not much magic there--it&amp;apos;s just a plain html page with enough
javascript to persist the settings--I will omit the gory details,
which you can poke around yourself in &amp;lt;a href=&amp;quot;https://github.com/malloc47/nonpartisan.me/blob/master/chrome/options.js&amp;quot;&amp;gt;the&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;https://github.com/malloc47/nonpartisan.me/blob/master/chrome/background.js&amp;quot;&amp;gt;repository&amp;lt;/a&amp;gt;, if
you&amp;apos;re so inclined.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So that&amp;apos;s an extension.  Writing the above was literally a matter of
minutes and some quality time with the Chrome API specifications.  As
is always the case (especially when I&amp;apos;m working outside of my area of
expertise, say with making the amateurish logo), the real work is
doing the little bits of spit-and-polish to handle the various
configuration options, throwing together the webpage, creating the
icons and promotional images for the &amp;lt;a href=&amp;quot;https://chrome.google.com/webstore/detail/ninebcppidndhampaggnjbijpacoadgg&amp;quot;&amp;gt;Chrome Web Store&amp;lt;/a&amp;gt;, etc.  But
it&amp;apos;s still good to know that the Chrome team has made the
extension-building process as simple and well &amp;lt;a href=&amp;quot;https://developer.chrome.com/extensions/docs.html&amp;quot;&amp;gt;documented&amp;lt;/a&amp;gt; as they
have.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/poor-mans-ldap/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/poor-mans-ldap/"/>
    <title>Poor Man&#39;s LDAP</title>
    <updated>2012-08-11T23:00:09Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;In addition to being a researcher and backend web developer, I&amp;apos;ve also
worn the system administrator hat for a number of years.  While the
likes of &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Ldap&amp;quot;&amp;gt;&amp;lt;code&amp;gt;LDAP&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Active_directory&amp;quot;&amp;gt;&amp;lt;code&amp;gt;Active Directory&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Network_Information_Service&amp;quot;&amp;gt;&amp;lt;code&amp;gt;NIS&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;, and their
ilk can work quite well for managing medium-to-large networks, I&amp;apos;ve
more often been tasked with managing small-scale (&amp;amp;lt; 20 machines)
heterogeneous Linux networks, where deploying &amp;lt;code&amp;gt;LDAP&amp;lt;/code&amp;gt; with full
&amp;lt;code&amp;gt;Kerberos&amp;lt;/code&amp;gt; authentication would be overkill.  Typical requirements
I&amp;apos;ve encountered in small lab settings are simple user account and
home folder sharing, and (relatively) similar package installations.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With this in mind, I did what probably every sysadmin in the same
situation would do: scrape together a simple set of scripts to handle
basic file synchronization for me.  Specifically, I noticed two
prevalent requirements among config files being synced:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;machines and/or distros have a common header or footer that must be
included (e.g., a list of system users in &amp;lt;code&amp;gt;/etc/passwd&amp;lt;/code&amp;gt;), and&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;specific machines (e.g., servers) shouldn&amp;apos;t have some files synced
with the rest of the machines (e.g., file shares might be different
on a server).&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Thus, &amp;lt;a href=&amp;quot;https://github.com/malloc47/pmldap&amp;quot;&amp;gt;&amp;lt;code&amp;gt;Poor Man&amp;apos;s LDAP&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt; was born.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While nothing more than a collection of scripts--no different than
what many other sysadmins have implemented, in all likelihood--they
will hopefully be of use for those who, like me, are graduate students
or otherwise non-full-time sysadmins that don&amp;apos;t have time to do things
the &amp;amp;quot;right&amp;amp;quot; way.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;apos;m dogfooding &amp;lt;code&amp;gt;pmldap&amp;lt;/code&amp;gt; on my research lab&amp;apos;s network, where we
(currently) have 5 Fedora machines (various versions between 10 and
16) and 5 Debian machines (all on stable).  Since my recent
&amp;lt;a href=&amp;quot;https://github.com/malloc47/pmldap/commit/ab8918c17f22d2a9dabd6ea9ca97b39c9cdc968a&amp;quot;&amp;gt;patch&amp;lt;/a&amp;gt;, &amp;lt;code&amp;gt;pmldap&amp;lt;/code&amp;gt; now supports groups, which are useful for running
&amp;lt;code&amp;gt;yum&amp;lt;/code&amp;gt; commands only on the Fedora machines and &amp;lt;code&amp;gt;apt&amp;lt;/code&amp;gt; commands on only
the Debian boxes.  Files being synchronized include: &amp;lt;code&amp;gt;fstab&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;group&amp;lt;/code&amp;gt;,
&amp;lt;code&amp;gt;hosts&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;hosts.allow&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;hosts.deny&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;passwd&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;shadow&amp;lt;/code&amp;gt;, and
&amp;lt;code&amp;gt;sudoers&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Also in the repo are a few convenience tools that I&amp;apos;ve found useful:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;authorize-machine&amp;lt;/code&amp;gt; bootstraps a machine by setting up ssh keys&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;setup&amp;lt;/code&amp;gt; bootstraps config files from a remote machine so they can be
merged with the desired additions&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;cmd&amp;lt;/code&amp;gt; runs an arbitrary command on all machines (or a particular
group of machines)&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;useradd&amp;lt;/code&amp;gt; is a feature-incomplete reimplementation of the native
&amp;lt;code&amp;gt;useradd&amp;lt;/code&amp;gt; command that works on local &amp;lt;code&amp;gt;passwd&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;shadow&amp;lt;/code&amp;gt;, and
&amp;lt;code&amp;gt;group&amp;lt;/code&amp;gt; files to add new users that can later be synchronized across
the network&amp;lt;/p&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;Since I hadn&amp;apos;t stumbled across something of this scope to fit the
small-scale-network use case, I&amp;apos;m hopeful that &amp;lt;code&amp;gt;pmldap&amp;lt;/code&amp;gt; will be of use
to anyone in a similar situation.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You&amp;apos;ll find it on gitub &amp;lt;a href=&amp;quot;https://github.com/malloc47/pmldap&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/git-dotfile-versioning-across-systems/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/git-dotfile-versioning-across-systems/"/>
    <title>Git Dotfile Versioning Across Systems</title>
    <updated>2012-07-29T01:11:08Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;For users of unix-like operating systems, treating your dotfiles like
real code and keeping them in a repository is a supremely good idea.
While there are a myriad of ways to go about this, the typical (albeit
destructive) way to do this is by symlinking files in the repository
to the home folder:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;#!/bin/bash
DEST=$HOME
FILES=$(git ls-files | grep -v .gitignore | grep -v ^$(basename $0)$)
for f in $FILES ; do
    [ -n &amp;amp;quot;$(dirname $f)&amp;amp;quot; \
      -a &amp;amp;quot;$(dirname $f)&amp;amp;quot; != &amp;amp;quot;.&amp;amp;quot; \
      -a ! -d &amp;amp;quot;$DEST/$(dirname $f)&amp;amp;quot; ] \
    &amp;amp;amp;&amp;amp;amp; mkdir -p $DEST/$(dirname $f)
    ln -sf $(pwd)/$f $DEST/$f
done
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;I specifically chose to have &amp;lt;code&amp;gt;FILES&amp;lt;/code&amp;gt; populated using &amp;lt;code&amp;gt;git ls-files&amp;lt;/code&amp;gt; to
prevent any unversioned files from sneaking into the home folder,
additionally filtering out both the &amp;lt;code&amp;gt;.gitignore&amp;lt;/code&amp;gt; file, and the current
script name (so it can be safely checked in as well).  After this, we
loop over the files, creating appropriate directories if they do not
exist, effectively symlinking the &amp;lt;em&amp;gt;entire repo&amp;lt;/em&amp;gt; to the home folder,
clobbering any files that are already there (without asking!).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While most dotfiles won&amp;apos;t care what system they are on, certain
scripts or settings may be machine-dependent.  To accommodate this, I
include a &amp;lt;code&amp;gt;~/.sys/`hostname`/&amp;lt;/code&amp;gt; folder for every machine with
system-specific files.  Then, when symlinking, we favor files listed
in the &amp;lt;code&amp;gt;~/.sys/`hostname`/&amp;lt;/code&amp;gt; folder rather than the top-level files:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;if [ -e &amp;amp;quot;.sys/$(hostname)/$f&amp;amp;quot; ] ; then
    ln -sf $(pwd)/.sys/$(hostname)/$f $DEST/$f
else
    ln -sf $(pwd)/$f $DEST/$f
fi
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Thus, for example, given &amp;lt;code&amp;gt;machine1&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;machine2&amp;lt;/code&amp;gt; and a repo in the
&amp;lt;code&amp;gt;~/dotfiles&amp;lt;/code&amp;gt; directory with these files:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/dotfiles/.gitconfig
~/dotfiles/.sys/machine2/.gitconfig
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;machine1&amp;lt;/code&amp;gt; will get a symlink from&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/dotfiles/.gitconfig
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;to &amp;lt;code&amp;gt;~/.gitconfig&amp;lt;/code&amp;gt;, while &amp;lt;code&amp;gt;machine2&amp;lt;/code&amp;gt; will instead get a symlink from&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;~/dotfiles/.sys/machine2/.gitconfig
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;to &amp;lt;code&amp;gt;~/.gitconfig&amp;lt;/code&amp;gt;.  This variant of the script doesn&amp;apos;t explicitly
ignore the &amp;lt;code&amp;gt;.sys&amp;lt;/code&amp;gt; folder itself so it will be added to the home folder
as well.  Which, as an aside, can be useful by including something
like this&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;[ -d ~/.sys/`hostname`/bin ] &amp;amp;amp;&amp;amp;amp; export PATH=~/.sys/`hostname`/bin:$PATH
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;in the &amp;lt;code&amp;gt;.bashrc&amp;lt;/code&amp;gt; file such that specific scripts will be on the &amp;lt;code&amp;gt;PATH&amp;lt;/code&amp;gt;
for individual machines.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So the final script, with a bit of input checking, looks like this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;#!/bin/bash
set -e
EXPECTED_ARGS=1
if [ $# -lt $EXPECTED_ARGS ]
then
    echo &amp;amp;quot;Usage: `basename $0` directory&amp;amp;quot;
    echo &amp;amp;quot;WILL clobber existing files without permission: Use at your own risk&amp;amp;quot;
    exit 65
fi

DEST=$1
FILES=$(git ls-files | grep -v .gitignore | grep -v ^$(basename $0)$)

for f in $FILES ; do
    echo $f
    if [ -n &amp;amp;quot;$(dirname $f)&amp;amp;quot; -a &amp;amp;quot;$(dirname $f)&amp;amp;quot; != &amp;amp;quot;.&amp;amp;quot; -a ! -d &amp;amp;quot;$DEST/$(dirname $f)&amp;amp;quot; ] ; then
        mkdir -p $DEST/$(dirname $f)
    fi

    if [ -e &amp;amp;quot;.sys/$(hostname)/$f&amp;amp;quot; ] ; then
        ln -sf $(pwd)/.sys/$(hostname)/$f $DEST/$f
    else
        ln -sf $(pwd)/$f $DEST/$f
    fi
done
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;By making &amp;lt;code&amp;gt;DEST&amp;lt;/code&amp;gt; a command-line parameter, a dry-run can be done by
simply giving it an empty folder.  There&amp;apos;s no issue doing this inside
the repo&amp;apos;s working tree, as only checked-in files will be transferred
to the target directory:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;gt; mkdir tmp
&amp;amp;gt; ./deploy tmp/
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Doing this, the contents of the &amp;lt;code&amp;gt;tmp/&amp;lt;/code&amp;gt; directory can be verified with
&amp;lt;code&amp;gt;ls -al&amp;lt;/code&amp;gt; to see exactly what the script will do to your home folder.
Once satisfied, it can be run again with&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;gt; ./deploy ~
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;to symlink all the files to the home folder proper.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Feel free to grab an up-to-date version of this script from my own
dotfile repo &amp;lt;a href=&amp;quot;https://github.com/malloc47/config/blob/master/deploy&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/beating-interview-problems-to-death-with-parallel-haskell/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/beating-interview-problems-to-death-with-parallel-haskell/"/>
    <title>Beating Interview Problems to Death with Parallel Haskell</title>
    <updated>2012-07-08T14:30:37Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Like anyone for whom graduation is becoming more immanent, I&amp;apos;ve been
taking a look at the latest trends in the typical technology interview
process.  While many of the &amp;lt;a href=&amp;quot;https://imranontech.com/2007/01/24/using-fizzbuzz-to-find-developers-who-grok-coding/&amp;quot;&amp;gt;Fizz Buzz&amp;lt;/a&amp;gt;es being thrown around
aren&amp;apos;t exactly exciting highlights of problem solving... well, you can
always just beat them to death.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Run-length_encoding&amp;quot;&amp;gt;Run Length Encoding&amp;lt;/a&amp;gt; algorithm is a nice, compact, and
slightly real-world interview problem that has been making the rounds
for &amp;lt;a href=&amp;quot;https://stackoverflow.com/questions/2048854/c-interview-question-run-length-coding-of-strings&amp;quot;&amp;gt;years&amp;lt;/a&amp;gt; now.  The basic idea being that &amp;amp;quot;runs&amp;amp;quot; of data,
e.g. &amp;lt;code&amp;gt;aaaabbbbbbb&amp;lt;/code&amp;gt;, are compressed into tuples, e.g. &amp;lt;code&amp;gt;4a7b&amp;lt;/code&amp;gt;, which may
be a smaller representation if there is a large amount of adjacent
repeated information.  While real-world use cases for such a naÃ¯ve
compression scheme aren&amp;apos;t abundant, the algorithm is straightforward
and can be implemented in a dozen lines or so in most &amp;lt;a href=&amp;quot;https://rosettacode.org/wiki/Run-length_encoding&amp;quot;&amp;gt;languages&amp;lt;/a&amp;gt;.
If you&amp;apos;ve got regexes or similar libraries at your disposal, you can
manage even fewer lines.  In &amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt;&amp;apos;s case, one:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;rleMap l = map (\e -&amp;amp;gt; (head e, length e)) (group l)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which converts a string (or any arbitrary list of items) into a list
of tuples, each of which has the character and its count.  The
function has type&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;rleMap :: (Eq a) =&amp;amp;gt; [a] -&amp;amp;gt; [(a, Int)]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Simple and easy.  But where&amp;apos;s the fun in calling it quits now?
Let&amp;apos;s &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/MapReduce&amp;quot;&amp;gt;MapReduce&amp;lt;/a&amp;gt; our &amp;lt;code&amp;gt;RLE&amp;lt;/code&amp;gt; algorithm to make it easier to parallelize
and potentially &amp;lt;a href=&amp;quot;https://hadoop.apache.org/mapreduce/&amp;quot;&amp;gt;Hadoop&amp;lt;/a&amp;gt;-friendly.  We&amp;apos;ve already got our &amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt;
function, so lets create a &amp;lt;code&amp;gt;reduce&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;rleReduce :: [(Char,Int)] -&amp;amp;gt; [(Char,Int)] -&amp;amp;gt; [(Char,Int)]
rleReduce [] [] = []
rleReduce a  [] = a
rleReduce [] b  = b
rleReduce a b
          | (fst $ last a ) == (fst $ head b) =
                 init a ++  [(fst(last(a)),snd(last(a)) + snd(head(b)))] ++ tail b
          | otherwise = a ++ b
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This is a less common component of RLE implementations (I haven&amp;apos;t
spotted this particular bit of code anywhere else, so there&amp;apos;s likely
room for improvement), but no less straightforward: simply join two
&amp;lt;code&amp;gt;RLE&amp;lt;/code&amp;gt;&amp;apos;d lists together if their tail and head are not the same
character; if they are, merge the head and tail tuple (updating the
count) and combine the rest of the list as normal.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Now, it&amp;apos;s simply a matter of splitting the RLE target into pieces,
&amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt;ing over pieces, and &amp;lt;code&amp;gt;reducing&amp;lt;/code&amp;gt; them back into a cohesive
&amp;lt;code&amp;gt;RLE&amp;lt;/code&amp;gt;-encoded document:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;splitRLE n s = foldl rleReduce [] $ map rleMap $ chunkn n s
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;(&amp;lt;code&amp;gt;chunkn&amp;lt;/code&amp;gt; is a simple hand-rolled routine that splits a string into
&amp;lt;code&amp;gt;n&amp;lt;/code&amp;gt; similar-sized pieces) As expected, splitting the list apart and
recombining is needless overhead without parallelization:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;# No splitting (rleMap s)
&amp;amp;gt; ghc -O2 prle --make
&amp;amp;gt; /usr/bin/time -f &amp;apos;%E&amp;apos; ./prle large.txt 1&amp;amp;gt;/dev/null
0:02.68

# Nonparallel splitting (foldl rleReduce [] $ map rleMap $ chunkn n s)
&amp;amp;gt; ghc -O2 prle --make
&amp;amp;gt; /usr/bin/time -f &amp;apos;%E&amp;apos; ./prle large.txt 1&amp;amp;gt;/dev/null
0:06.51
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;If we parallelize it using a simple &amp;lt;code&amp;gt;parMap&amp;lt;/code&amp;gt;,&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;parallelRLE n s = foldl rleReduce [] $ (parMap rdeepseq) rleMap $ chunkn n s
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;we might expect some improvement:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;# parallelRLE n s = foldl rleReduce [] $ (parMap rdeepseq) rleMap $ chunkn n s
&amp;amp;gt; ghc -O2 prle --make -threaded -rtsopts

# Parallel map 1 core
&amp;amp;gt; /usr/bin/time -f &amp;apos;%E&amp;apos; ./prle large.txt +RTS -N1 1&amp;amp;gt;/dev/null
0:06.31

# Parallel map 2 cores
&amp;amp;gt; /usr/bin/time -f &amp;apos;%E&amp;apos; ./prle large.txt +RTS -N2 1&amp;amp;gt;/dev/null
0:08.50

# Parallel map 4 cores
/usr/bin/time -f &amp;apos;%E&amp;apos; ./prle large.txt +RTS -N4 1&amp;amp;gt;/dev/null
0:11.00
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Unfortunately, the bookkeeping and garbage collection overwhelm the
problem very quickly, never achieving better performance.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;apos;m running the above on a randomly-generated &amp;lt;code&amp;gt;12MB&amp;lt;/code&amp;gt; text file, and no
amount of coaxing could make the parallelized version do any better.
While we could have written our &amp;lt;code&amp;gt;RLE&amp;lt;/code&amp;gt; algorithm in plain &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt; without
much more trouble and not have encountered such performance obstacles,
one does not &amp;lt;a href=&amp;quot;https://memegenerator.net/instance/20426610&amp;quot;&amp;gt;simply parallelize C&amp;lt;/a&amp;gt; by swapping in a &amp;lt;code&amp;gt;parMap&amp;lt;/code&amp;gt;
either (see also: &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt;).  Thus, we deep-dive into some &amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt;
optimization to get a performant version.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;There is one particularly painful bottleneck: &amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt; list monads
are not ideal for handling bulk data of the sort we need because
&amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt;&amp;apos;s &amp;lt;code&amp;gt;String&amp;lt;/code&amp;gt; type is represented as a &amp;lt;code&amp;gt;[Char]&amp;lt;/code&amp;gt;.  Since there&amp;apos;s
no reason to use a boxed linked list just to scan over characters, we
instead turn to &amp;lt;code&amp;gt;Data.ByteString&amp;lt;/code&amp;gt; for reading the input, and to
&amp;lt;code&amp;gt;Data.Sequence&amp;lt;/code&amp;gt; to handle the RLE-encoded tuples.  &amp;lt;code&amp;gt;Data.Sequence&amp;lt;/code&amp;gt;
specifically removes the large penalty when concatenating the lists
together in the &amp;lt;code&amp;gt;reduce&amp;lt;/code&amp;gt; step, as adding to either end of a &amp;lt;code&amp;gt;Seq&amp;lt;/code&amp;gt; is a
constant time operation. This is in contrast to &amp;lt;code&amp;gt;[]&amp;lt;/code&amp;gt;, where only
adding an element to a list head is constant time.  Importing these&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;import Data.ByteString.Lazy.Char8 as BL
       (ByteString
       ,length
       , take
       , null
       , splitAt
       , group
       , head
       , pack
       , readFile)
import Data.Sequence as S
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;lets us rewrite our &amp;lt;code&amp;gt;map&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;rleMap :: BL.ByteString -&amp;amp;gt; Seq (Char,Int)
rleMap l = fromList $ P.zip (map BL.head c) (map (fromIntegral . BL.length) c)
       where
        c = BL.group $ l
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;and &amp;lt;code&amp;gt;reduce&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;rleReduce :: Seq (Char,Int) -&amp;amp;gt; Seq (Char,Int) -&amp;amp;gt; Seq (Char,Int)
rleReduce a b = rleReduce&amp;apos; (viewr a) (viewl b)
             where
              rleReduce&amp;apos; EmptyR EmptyL = S.empty
              rleReduce&amp;apos; EmptyR _ = b
              rleReduce&amp;apos; _ EmptyL = a
              rleReduce&amp;apos; (rs :&amp;amp;gt; r) (l :&amp;amp;lt; ls)
                         | (fst r) == (fst l) =
                           (rs |&amp;amp;gt; (fst(r),snd(r) + snd(l))) &amp;amp;gt;&amp;amp;lt; ls
                         | otherwise = a &amp;amp;gt;&amp;amp;lt; b
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Optionally, &amp;lt;code&amp;gt;Data.Sequence&amp;lt;/code&amp;gt; can be expressed with &amp;lt;code&amp;gt;ViewPatterns&amp;lt;/code&amp;gt;.
Rewriting with these in mind allows the new &amp;lt;code&amp;gt;reduce&amp;lt;/code&amp;gt; to resemble the
old one fairly closely:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;{-# LANGUAGE ViewPatterns #-}
rleReduce (viewr -&amp;amp;gt; EmptyR) (viewl -&amp;amp;gt; EmptyL) = S.empty
rleReduce (viewr -&amp;amp;gt; EmptyR) b = b
rleReduce a (viewl -&amp;amp;gt; EmptyL) = a
rleReduce a@(viewr -&amp;amp;gt; (rs :&amp;amp;gt; r)) b@(viewl -&amp;amp;gt; (l :&amp;amp;lt; ls))
           | (fst r) == (fst l) =
             (rs |&amp;amp;gt; (fst(r),snd(r) + snd(l))) &amp;amp;gt;&amp;amp;lt; ls
           | otherwise = a &amp;amp;gt;&amp;amp;lt; b
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Now we finally define a new &amp;lt;code&amp;gt;parallelRLE&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;parallelRLE :: Int -&amp;amp;gt; BL.ByteString -&amp;amp;gt; Seq (Char, Int)
parallelRLE n s = foldl rleReduce empty $ (parMap rseq) rleMap $ chunkn n s
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;and wrap it all up in a &amp;lt;code&amp;gt;IO&amp;lt;/code&amp;gt; monad&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;haskell&amp;quot;&amp;gt;main :: IO()
main = do
     [fileName] &amp;amp;lt;- getArgs
     s &amp;amp;lt;- (BL.readFile fileName)
     print (parallelRLE (numCapabilities) s)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;With an improved algorithm and &amp;lt;code&amp;gt;IO&amp;lt;/code&amp;gt; wrapper, it&amp;apos;s time for a more
complete benchmark:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/beating-interview-problems-to-death-with-parallel-haskell/prle-plot.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/beating-interview-problems-to-death-with-parallel-haskell/prle-plot.jpg&amp;quot; alt=&amp;quot;Performance Plot&amp;quot; width=&amp;quot;600&amp;quot; height=&amp;quot;400&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This was run on a &amp;lt;code&amp;gt;0.5GB&amp;lt;/code&amp;gt; file, as the smaller &amp;lt;code&amp;gt;12MB&amp;lt;/code&amp;gt; file used above
runs so fast that is essentially instant.  Between 2 and 5 processors,
we get a nicely ramped speedup.  After 5 processors, the bookkeeping
overhead rears its ugly head again reversing the trend, and around 48
processors (my system maximum), the parallelization ends up running as
slowly as the unparallelized version.  This is certainly not the end
of possible optimizations, but we have to stop sometime.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While I&amp;apos;m no &amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt; expert, parallelization which costs no more
than swapping in a &amp;lt;code&amp;gt;parMap&amp;lt;/code&amp;gt; and paying homage to the Big O gods is a
very compelling reason to hammer out any other toy interview questions
with &amp;lt;code&amp;gt;Haskell&amp;lt;/code&amp;gt; in the future.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Get the code &amp;lt;a href=&amp;quot;https://github.com/malloc47/snippets/tree/master/prle&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.  Feedback welcome.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/google-completion-in-emacs/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/google-completion-in-emacs/"/>
    <title>Google Completion in Emacs</title>
    <updated>2012-05-19T22:29:30Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;While many an &amp;lt;code&amp;gt;emacs&amp;lt;/code&amp;gt; include &amp;lt;code&amp;gt;dabbrev-expand&amp;lt;/code&amp;gt; for within-buffer
completion, I&amp;apos;ve always wanted (purely for reasons of amusement) to
take it further: completion via Google&amp;apos;s search suggestions.  I was
going to do this as a weekend project, but an ugly version was
surprisingly simple.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Conveniently, &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; is all we need to fetch the completions for a
query string as &amp;lt;code&amp;gt;JSON&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;&amp;amp;gt; echo -en $(curl -H &amp;amp;quot;Accept: application/json&amp;amp;quot; \
  &amp;amp;quot;https://suggestqueries.google.com/complete/search?client=firefox&amp;amp;amp;q=query&amp;amp;quot;)

[&amp;amp;quot;query&amp;amp;quot;,[&amp;amp;quot;query&amp;amp;quot;,&amp;amp;quot;query xiv&amp;amp;quot;,&amp;amp;quot;query letter&amp;amp;quot;,&amp;amp;quot;query_posts&amp;amp;quot;,&amp;amp;quot;query shark&amp;amp;quot;,&amp;amp;quot;query access&amp;amp;quot;,&amp;amp;quot;query tracker&amp;amp;quot;,&amp;amp;quot;query string&amp;amp;quot;,&amp;amp;quot;query letter sample&amp;amp;quot;,&amp;amp;quot;queryperformancecounter&amp;amp;quot;]]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;using a (very platform dependent) &amp;lt;code&amp;gt;echo&amp;lt;/code&amp;gt; trick to convert the escaped
unicode sequences to their proper characters.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With this, a quick hack in &amp;lt;code&amp;gt;elisp&amp;lt;/code&amp;gt; is all that&amp;apos;s necessary to parse
the results into &amp;lt;code&amp;gt;emacs&amp;lt;/code&amp;gt; and insert it into the current buffer:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;cl&amp;quot;&amp;gt;(defun google-request (query)
 (shell-command-to-string
  (format
   &amp;amp;quot;echo -en $(curl -H \&amp;amp;quot;Accept: application/json\&amp;amp;quot; \&amp;amp;quot;https://suggestqueries.google.com/complete/search?client=firefox&amp;amp;amp;q=%s\&amp;amp;quot; 2&amp;amp;gt;/dev/null)&amp;amp;quot;
   query)))

(defun google-preprocess (query)
 (let ((l (split-string
	   (apply &amp;apos;string
		  (removel
		   &amp;apos;(?\&amp;amp;quot; ?\[ ?\])
		   (string-to-list query)))
	   &amp;amp;quot;,&amp;amp;quot;)))
  (if (&amp;amp;gt; (length (car (cdr l))) 0)
    (remove (car l) (cdr l))
   nil)))

(defun google-complete ()
 (interactive)
 (end-of-thing &amp;apos;word)
 (let ((s (thing-at-point &amp;apos;word)))
  (when s
   (let ((q (google-preprocess (google-request s))))
    (when q
     (insert (substring
	       (car q)
	       (length s))))))))

(defun removel (el l)
 (cond (el (removel (cdr el) (remove (car el) l)))
       (t l)))
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Since it went more swiftly than anticipated, I generalized the code to
parsing any delimited shell output and wrapped it in a minor mode with
some key bindings and &amp;lt;code&amp;gt;customize&amp;lt;/code&amp;gt; variables.  Right now, I&amp;apos;m
uncreatively calling it &amp;lt;a href=&amp;quot;https://github.com/malloc47/shell-parse.el/blob/master/shell-parse.el&amp;quot;&amp;gt;&amp;lt;code&amp;gt;shell-parse.el&amp;lt;/code&amp;gt;&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;After activating &amp;lt;code&amp;gt;shell-parse-mode&amp;lt;/code&amp;gt;, it has support for scrolling
through the list of completions forwards (&amp;lt;code&amp;gt;shell-parse-complete&amp;lt;/code&amp;gt;) and
backwards (&amp;lt;code&amp;gt;shell-parse-complete-backwards&amp;lt;/code&amp;gt;) with the &amp;lt;code&amp;gt;C-Tab&amp;lt;/code&amp;gt; and
&amp;lt;code&amp;gt;C-Shift-Tab&amp;lt;/code&amp;gt; keys, respectively.  Using &amp;lt;code&amp;gt;M-x customize-mode &amp;amp;lt;Enter&amp;amp;gt; shell-parse-mode&amp;lt;/code&amp;gt;, you can swap out the &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; command with any shell
snippet that will kick back completions, and change the delimiter as
well.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;You can grab &amp;lt;code&amp;gt;shell-parse.el&amp;lt;/code&amp;gt; on &amp;lt;a href=&amp;quot;https://github.com/malloc47/shell-parse.el&amp;quot;&amp;gt;github&amp;lt;/a&amp;gt;.  Simply &amp;lt;code&amp;gt;load-file&amp;lt;/code&amp;gt; the
&amp;lt;code&amp;gt;shell-parse.el&amp;lt;/code&amp;gt; script in &amp;lt;code&amp;gt;.emacs&amp;lt;/code&amp;gt; and it should be ready to go.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;It has a few todos scattered through it yet, and is not very idiomatic
&amp;lt;code&amp;gt;emacs&amp;lt;/code&amp;gt; or portable, but that&amp;apos;s what github&amp;apos;s &amp;lt;a href=&amp;quot;https://github.com/malloc47/shell-parse.el/issues&amp;quot;&amp;gt;issue tracker&amp;lt;/a&amp;gt; is
for, after all.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/preprocessors-and-graphviz/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/preprocessors-and-graphviz/"/>
    <title>Preprocessors and Graphviz</title>
    <updated>2012-04-07T03:58:42Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;Graphviz&amp;lt;/code&amp;gt; is a useful toolset for describing and rendering graphs.
One of the features the graphviz language doesn&amp;apos;t have, however, is a
&amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt;-like preprocessor to &amp;lt;code&amp;gt;#include&amp;lt;/code&amp;gt; files.  Which, granted, isn&amp;apos;t a
particularly common use case when building graphs, but one I found
desirable when dealing with a large number of graphs with a shared
subset of nodes, differing by how they are connected.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Initially, I grafted together an unwieldy &amp;lt;a href=&amp;quot;https://gist.github.com/2324425&amp;quot;&amp;gt;script&amp;lt;/a&amp;gt; that used an
ugly &amp;lt;code&amp;gt;grep&amp;lt;/code&amp;gt;+&amp;lt;code&amp;gt;sed&amp;lt;/code&amp;gt; combination to grab the line number and substitute
the included file contents: essentially a poor man&amp;apos;s preprocessor.
Thankfully, to the rescue was a particularly useful &amp;lt;a href=&amp;quot;https://gist.github.com/2037497&amp;quot;&amp;gt;gist&amp;lt;/a&amp;gt;
(initially illustrated with JavaScript) I serendipitously found
on &amp;lt;a href=&amp;quot;https://www.reddit.com/r/programming/comments/qxn73/mixing_javascript_and_the_cpreprocessor/&amp;quot;&amp;gt;Reddit&amp;lt;/a&amp;gt;. The key call being this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;cpp -P -undef -Wundef -std=c99 -nostdinc -Wtrigraphs \
    -fdollars-in-identifiers -C &amp;amp;lt; input.dot &amp;amp;gt; output.dot
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;In your input &amp;lt;code&amp;gt;.dot&amp;lt;/code&amp;gt; file, standard &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt; include syntax&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;c&amp;quot;&amp;gt;#include &amp;amp;quot;common.doth&amp;amp;quot;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;will work as expected, despite the fact that it is a completely
different language.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This solution is highly verbose if you don&amp;apos;t drop it in a build chain
and forget about it.  Which is straightforward using a standard
&amp;lt;a href=&amp;quot;https://github.com/open-it-lab/ol-curriculum/blob/master/makefile&amp;quot;&amp;gt;makefile&amp;lt;/a&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;make&amp;quot;&amp;gt;SOURCES = $(wildcard *.dot)
OBJECTS = $(SOURCES:.dot=.doto)
IMAGES  = $(SOURCES:.dot=.png)

all: $(IMAGES)

%.png: %.doto
	dot -Tpng $&amp;amp;lt; &amp;amp;gt; $@

%.doto: %.dot
	cpp -P -undef -Wundef -std=c99 -nostdinc -Wtrigraphs \
		-fdollars-in-identifiers -C &amp;amp;lt; $&amp;amp;lt; | \
		gvpr -c &amp;apos;N[$$.degree==0]{delete(NULL,$$)}&amp;apos; &amp;amp;gt; $@

clean:
	-rm $(IMAGES) $(OBJECTS) *~
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;In the above example, I introduced an intermediate &amp;lt;code&amp;gt;doto&amp;lt;/code&amp;gt; file
(analogous to an object file) and &amp;lt;code&amp;gt;doth&amp;lt;/code&amp;gt; (header file) to recreate a
&amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt;-like build process.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Another ingredient above is the piped invocation of &amp;lt;code&amp;gt;gvpr&amp;lt;/code&amp;gt;, which
removes nodes of degree 1 (so that included nodes that are not
attached to anything in the current file will be ignored).  Remember
that in &amp;lt;code&amp;gt;makefiles&amp;lt;/code&amp;gt;, the &amp;lt;code&amp;gt;$&amp;lt;/code&amp;gt; must be escaped by using
&amp;lt;code&amp;gt;$$&amp;lt;/code&amp;gt;. Unfortunately, the &amp;lt;code&amp;gt;delete&amp;lt;/code&amp;gt; function in &amp;lt;code&amp;gt;gvpr&amp;lt;/code&amp;gt; is &amp;lt;a href=&amp;quot;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=652952&amp;quot;&amp;gt;broken&amp;lt;/a&amp;gt; in
a number of Debian-based distros (at least), but the latest version
works bug-free in Arch.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;So, given a &amp;lt;code&amp;gt;nodes.doth&amp;lt;/code&amp;gt; file with these contents:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;    node1 [label = &amp;amp;quot;1&amp;amp;quot;];
    node2 [label = &amp;amp;quot;2&amp;amp;quot;];
    node3 [label = &amp;amp;quot;3&amp;amp;quot;];
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;and a &amp;lt;code&amp;gt;graph.dot&amp;lt;/code&amp;gt; file as such:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;graph g {
    #include &amp;amp;quot;nodes.doth&amp;amp;quot;

    node1 -- node2;
    node2 -- node3;
    node3 -- node1;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;the &amp;lt;code&amp;gt;makefile&amp;lt;/code&amp;gt; will use &amp;lt;code&amp;gt;cpp&amp;lt;/code&amp;gt; to generate the following intermediate
file,&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;graph g {
    node1 [label = &amp;amp;quot;1&amp;amp;quot;];
    node2 [label = &amp;amp;quot;2&amp;amp;quot;];
    node3 [label = &amp;amp;quot;3&amp;amp;quot;];
    node1 -- node2;
    node2 -- node3;
    node3 -- node1;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which will then be compiled by graphviz&amp;apos;s &amp;lt;code&amp;gt;dot&amp;lt;/code&amp;gt; command into an image.
While obviously not necessary with this toy example, scaling up to
more nodes shared by multiple graphs is much more pleasant when the
nodes don&amp;apos;t have to be duplicated in each graph.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Very little of this is exclusive to graphviz, and is reasonable to
extrapolate to other problems fairly easily.  And, since this
literally uses the &amp;lt;code&amp;gt;C&amp;lt;/code&amp;gt; preprocessor to do the job, there&amp;apos;s many more
tricks to be explored.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Quite helpful to have on hand when the need arises, and a testament to
the quality of &amp;lt;code&amp;gt;cpp&amp;lt;/code&amp;gt; that it can be used for arbitrary metaprogramming
in other languages.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/qr-codes-en-masse/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/qr-codes-en-masse/"/>
    <title>QR Codes En Masse</title>
    <updated>2012-03-25T03:46:57Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;For the upcoming &amp;lt;a href=&amp;quot;https://www.posscon.org/&amp;quot;&amp;gt;POSSCON&amp;lt;/a&amp;gt; here in Columbia, we had need of QR
codes for the brochure.  Lots of them.  And while there are
&amp;lt;a href=&amp;quot;https://qrcode.kaywa.com/&amp;quot;&amp;gt;some&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://goqr.me/&amp;quot;&amp;gt;great&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;https://www.patrick-wied.at/static/qrgen/&amp;quot;&amp;gt;online&amp;lt;/a&amp;gt;
resources,
I wanted to create QR codes in batch.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Of course, the online services could be batch processed with a dose
of &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; magic, but there is a more UNIX way: &amp;lt;code&amp;gt;libqrencode&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Creating a discrete QR code image is straightforward with the
&amp;lt;code&amp;gt;qrencode&amp;lt;/code&amp;gt; command:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;qrencode -o output.png -s 50 &amp;amp;quot;https://www.malloc47.com&amp;amp;quot;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;-s&amp;lt;/code&amp;gt; parameter controls the size of the QR &amp;amp;quot;dots&amp;amp;quot; and therefore
the output resolution.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is great if you don&amp;apos;t need a vectorized format, but for
print-quality work where you may not know the eventual &amp;lt;code&amp;gt;DPI&amp;lt;/code&amp;gt;, having
vectorized output (e.g. &amp;lt;code&amp;gt;eps&amp;lt;/code&amp;gt;, and &amp;lt;code&amp;gt;svg&amp;lt;/code&amp;gt;) is preferable.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Again, the vast repositories of libre software come to the rescue
here: &amp;lt;code&amp;gt;potrace&amp;lt;/code&amp;gt; is designed for exactly this.  Annoyingly, it only
handles bitmap (or the easy-to-generate &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Netpbm_format&amp;quot;&amp;gt;pnm&amp;lt;/a&amp;gt;) format, so a little
&amp;lt;code&amp;gt;imagemagick&amp;lt;/code&amp;gt; will take care of this:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;convert output.png output.bmp
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Now we can convert to a vector format easily:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;potrace -e -o output.eps output.bmp # -e is for EPS
potrace -s -o output.svg output.bmp # -s is for SVG
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;We can wrap it all up into a nice (&amp;lt;code&amp;gt;bash&amp;lt;/code&amp;gt;) script:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;#!/bin/bash
set -e
qrencode -o $1.png -s 50 &amp;amp;quot;$2&amp;amp;quot;
convert $1.png $1.bmp
potrace -e -o $1.eps $1.bmp
rm $1.png $1.bmp
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which takes a file name prefix and a string to be encoded. To generate
a large set of QR codes with this script, simply create a file with
file prefix-&amp;lt;code&amp;gt;URL&amp;lt;/code&amp;gt;(or whatever data is to be encoded) pairs, each on a
separate line,&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;google https://www.google.com
amazon https://www.amazon.com
reddit https://www.reddit.com
....
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;and then loop over this file, line-by-line:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;while read line ; do ./create-qr-code.sh $line ; done &amp;amp;lt; list.text
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which conveniently gives us &amp;lt;code&amp;gt;google.eps&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;amazon.eps&amp;lt;/code&amp;gt;, and
&amp;lt;code&amp;gt;reddit.eps&amp;lt;/code&amp;gt; files for their respective &amp;lt;code&amp;gt;URL&amp;lt;/code&amp;gt;s.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If there is uncertainty that your &amp;lt;code&amp;gt;URL&amp;lt;/code&amp;gt;s are good (i.e. don&amp;apos;t kick back
&amp;lt;code&amp;gt;404&amp;lt;/code&amp;gt;s), then you can augment the above script with this nice &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt;
snippet (courtesy of &amp;lt;a href=&amp;quot;https://stackoverflow.com/questions/2924422/how-do-i-determine-if-a-web-page-exists-with-shell-scripting&amp;quot;&amp;gt;this&amp;lt;/a&amp;gt; post on SO):&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;#!/bin/bash
set -e
curl -s --head $2 | head -n 1 | grep &amp;amp;quot;HTTP/1.[01] [23]..&amp;amp;quot; &amp;amp;gt; /dev/null
if [ $? -eq 0 ] ; then
    qrencode -o $1.png -s 50 &amp;amp;quot;$2&amp;amp;quot;
    convert $1.png $1.bmp
    potrace -e -o $1.eps $1.bmp
    rm $1.png $1.bmp
else
    echo &amp;amp;quot;URL error: $2&amp;amp;quot; 1&amp;amp;gt;&amp;amp;amp;2
fi
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This will let you know which &amp;lt;code&amp;gt;URL&amp;lt;/code&amp;gt;s don&amp;apos;t come back with clean headers
so you can give them further attention.  It won&amp;apos;t capture everything
that might go wrong, but it does give you a programmatic way to verify
that all is well.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Incidentally, all the tools used here can be installed on Arch with&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;pacman -S qrencode potrace imagemagick curl
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Not exactly the prettiest shell glue, but it certainly beats slowly
copy &amp;amp;amp; pasting in and out of a browser.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/flirting-with-the-front-end/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/flirting-with-the-front-end/"/>
    <title>Flirting with the Front End</title>
    <updated>2012-03-24T22:32:08Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Every few years, when I&amp;apos;m not teaching introductory web programming, I
revisit front end development, oftentimes in the form of retooling my
site.  Last time, it was a Wordpress-driven theme with
cobbled-together JavaScript snippets for random bits of functionality:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/flirting-with-the-front-end/old-site.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/flirting-with-the-front-end/thumb/old-site.jpg&amp;quot; alt=&amp;quot;Old Site&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;183&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Serviceable, at least.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Before this, I used a generic Wordpress theme, the specifics of which
I don&amp;apos;t recall.  Rolling back all the way to the mid-90s, I had a
&amp;lt;a href=&amp;quot;http://www.fortunecity.com&amp;quot;&amp;gt;fortunecity&amp;lt;/a&amp;gt; site, which was--as typical of sites in the
90s--equal parts bland and garish:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/flirting-with-the-front-end/older-site.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/flirting-with-the-front-end/thumb/older-site.jpg&amp;quot; alt=&amp;quot;Old Site&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;210&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Yes, it had a Christmas theme for the title page. And yes, the header,
navigation bar, and footer (on individual pages) are all java applets.
Not exactly, a usability panacea.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And now, I&amp;apos;ve transitioned to &amp;lt;a href=&amp;quot;https://github.com/mojombo/jekyll&amp;quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt;, for a few reasons:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;It&amp;apos;s hard to get faster than static pages for serving content.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/&amp;quot;&amp;gt;Github&amp;lt;/a&amp;gt; can handle more traffic than the shared hosting I was
using previously.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;A Jekyll deploy on github can&amp;apos;t use external plugins.  Which is, by
most accounts, a downside, but it forces me to find front-end
solutions for what I want rather than turning to the back end for
everything.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;I wanted to build everything from scratch.  The limited &amp;lt;a href=&amp;quot;https://shopify.github.io/liquid/&amp;quot;&amp;gt;Liquid&amp;lt;/a&amp;gt;
DSL used by Jekyll is leaner than full-blown &amp;lt;code&amp;gt;PHP&amp;lt;/code&amp;gt;, and more
satisfying for building from the ground-up (all my Wordpress themes
started from--at minimum--a skeleton theme, just to cover the
essentials needed by Wordpress).&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Having everything in a git repo is both satisfying for my current
work flow and avoids the pain of database backups.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;So &amp;lt;a href=&amp;quot;https://github.com/malloc47/malloc47.github.com&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; it is.  I avoided &amp;lt;code&amp;gt;jQuery&amp;lt;/code&amp;gt; (convenient as it is) to keep
things lean and loading quickly, and rampantly bludgeoned the site with
&amp;lt;code&amp;gt;HTML5/CSS3&amp;lt;/code&amp;gt; without much regard for backwards compatibility.  To
further optimize queries, I used Liquid &amp;lt;code&amp;gt;include&amp;lt;/code&amp;gt;s to aggregate all
the &amp;lt;code&amp;gt;js&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;css&amp;lt;/code&amp;gt; into single files.  For &amp;lt;code&amp;gt;JavaScript&amp;lt;/code&amp;gt;:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;javascript&amp;quot;&amp;gt;---
---
(function () {
    &amp;amp;quot;use strict&amp;amp;quot;;
{{ &amp;amp;quot;{% include cookies.js &amp;amp;quot; }}%}
{{ &amp;amp;quot;{% include mini-clock.js &amp;amp;quot; }}%}
{{ &amp;amp;quot;{% include check-time.js &amp;amp;quot; }}%}
{{ &amp;amp;quot;{% include event-handler.js &amp;amp;quot; }}%}
}());
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;you can wrap everything with &amp;lt;code&amp;gt;&amp;amp;quot;use strict&amp;amp;quot;&amp;lt;/code&amp;gt; to get some extra
exception goodness.  Doing this may cause &amp;lt;a href=&amp;quot;https://www.jslint.com/&amp;quot;&amp;gt;JSLint&amp;lt;/a&amp;gt; to complain
about indentation issues, and if you don&amp;apos;t add event handlers with
JavaScript (e.g. you use the &amp;lt;code&amp;gt;onclick&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;onload&amp;lt;/code&amp;gt; events in your
&amp;lt;code&amp;gt;HTML&amp;lt;/code&amp;gt; tags), you may run into scope issues as well.  All of this
together provided a nearly 20-point speed bump on
&amp;lt;a href=&amp;quot;https://developers.google.com/pagespeed/&amp;quot;&amp;gt;Google page speed&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I opted for a dual-themed site, determined by the time of day.  The
clock drawn in the HTML5 Canvas element in the upper-left shows when
the transition will occur, or you can override it with the icon next
to the clock.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;All in all, a good transition so far.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/jedi-knight-dark-forces-ii-a-coding-retrospective/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/jedi-knight-dark-forces-ii-a-coding-retrospective/"/>
    <title>Jedi Knight: Dark Forces II -- A coding retrospective</title>
    <updated>2019-03-12T02:21:57Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Years ago, before I got my hands on a real compiler, I satisfied my
coding compulsion by modding &amp;lt;em&amp;gt;Jedi Knight: Dark Forces II&amp;lt;/em&amp;gt; (which,
yes, has the subtitle backwards from normal). As detailed
&amp;lt;a href=&amp;quot;https://www.gamasutra.com/view/feature/3233/adding_languages_to_game_engines.php&amp;quot;&amp;gt;elsewhere&amp;lt;/a&amp;gt;, Jedi Knight (abbreviated JK) is one of the earlier
examples of a game that used a simple scripting language to handle
interaction with the game engine. COG script, as it was called was, in
hindsight, designed as much to be easy to compile as it was to write.
Of course, the attractive thing to any 13-year-old who desperately
wants to code in a &amp;amp;quot;real&amp;amp;quot; language was COG&amp;apos;s (superficial) similarity
to C.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The structure of a COG script is straightforward: it starts with a
&amp;lt;em&amp;gt;symbols&amp;lt;/em&amp;gt; section, where all variables are declared, followed
by a &amp;lt;em&amp;gt;code&amp;lt;/em&amp;gt; section broken into various messages (denoted by
goto-like labels, which must be declared as variables in the symbol
section to be valid) that represent events that could be triggered
in-game.  Aside from the usual expressions and flow control, there are
library functions that form an elementary API for the game engine
itself. Variables are typed, and have one of two scopes. The &amp;amp;quot;local&amp;amp;quot;
variables are bound within the scope of the script itself.  All
non-local variables must be bound to external entities in the game
environment--think of them as free parameters that must be specified
outside the script. Variable types include a few atomic types (e.g.,
int, flex) and some game-specific entities (e.g., things, surfaces),
and event types (e.g., messages). Have a look:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;symbols

surface downsect
message activated
thing ghosttel1
thing ghosttel2
thing player local
surface upsuf1
end

code

activated:
if (GetSenderRef() == upsuf1)
{
    player = GetLocalPlayerThing();
    TeleportThing(player, ghosttel1);
    return;
}

if (GetSenderRef() == downsect)
{
    player = GetLocalPlayerThing();
    TeleportThing(player, ghosttel2);
    return;
}
return;

end
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The above code works as you would expect--it simulates a &amp;amp;quot;ladder&amp;amp;quot; by
simply teleporting the player to the top of the ladder if they
&amp;amp;quot;activate&amp;amp;quot; (by pressing the spacebar while standing near) a surface at
the bottom, or teleports them back down if they activate the ladder
surface at the top.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;With no reference whatsoever--beyond the COGs included with the game
itself--it took me a while to get used to writing COG. But given that
it had one of the more fun compilers around (though billed as a
scripting language, COG was actually compiled to a stack-based
language at load-time), I had little trouble finding motivation to toy
with it.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Aside from COG, JK had a variety of other specialized file types that
could be (relatively) easily created or modified: .&amp;lt;em&amp;gt;3do&amp;lt;/em&amp;gt; for 3D
models, .&amp;lt;em&amp;gt;mat&amp;lt;/em&amp;gt; and &amp;lt;em&amp;gt;.bm&amp;lt;/em&amp;gt; for images (bitmaps, essentially), &amp;lt;em&amp;gt;.jk&amp;lt;/em&amp;gt; for
level meta information, &amp;lt;em&amp;gt;.pup&amp;lt;/em&amp;gt; (puppet) files that link keyframed
animations to specific pose states for a character, &amp;lt;em&amp;gt;.key&amp;lt;/em&amp;gt; files which
are the keyframed animations for the characters, &amp;lt;em&amp;gt;.snd&amp;lt;/em&amp;gt; files that
link sound to a character, &amp;lt;em&amp;gt;.ai&amp;lt;/em&amp;gt; files that expose variables for how
the characters react (simple artificial intelligence), &amp;lt;em&amp;gt;.gob&amp;lt;/em&amp;gt; files
which are essentially .zip files for storing all the various resources
in a level, and many many more file types I&amp;apos;m probably forgetting.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;But it was always the COGs that were most interesting to me, despite the fact that I wrote some ugly and embarrassing code in it. &amp;lt;a href=&amp;quot;https://raw.github.com/malloc47/return-of-thrawn/master/thrawn/cog/forcefield_goal.cog&amp;quot;&amp;gt;Really embarrassing&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;And I won&amp;apos;t even get started on my very unrefined sense of aesthetic
design in the level I ended up building. Yes, I built an entire level,
mainly to facilitate being able to write fun little scripts in
COG. Which is not nearly as involved as it sounds thanks to &amp;lt;a href=&amp;quot;https://jkdf2.fandom.com/wiki/JED&amp;quot;&amp;gt;JED&amp;lt;/a&amp;gt;,
a community-supported level editor. I built a very basic plotline with
a number of cutscenes (9, I claim in the &amp;lt;a href=&amp;quot;https://raw.github.com/malloc47/return-of-thrawn/master/thrawn/readme.txt&amp;quot;&amp;gt;readme&amp;lt;/a&amp;gt;); a weapon mod
that added a phaser to your arsenal (you know, the Star Trek sort--I
never claimed any of this made sense except to my 13-year-old self);
two new types of enemies, as I never thought the original lineup was
difficult enough; a few secret areas, including one with a rather
famous character; a zoo (again, never said anything about making
sense); a few RPG-style quests; and committed some very horrible
texture misuse, a fact that the contemporary &amp;lt;a href=&amp;quot;https://tacc.massassi.net/levels/review.php?id=41&amp;quot;&amp;gt;reviews&amp;lt;/a&amp;gt; will back
up.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I did learn some rather important software engineering lessons along
the way. I recently ran across my issue-tracking system: a notepad
with 50+ pages of bugs and fixes that I did on the level for the year
or so it was in development. Everything from enemies falling through
floors, cutscenes being mistimed, and impossible-to-win scenarios,
were among the issues I recorded. I simply couldn&amp;apos;t keep track of the
number of issues I would notice on every playthrough without writing
them down.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;On my nostalgic adventure, I decided to actually get Jedi Knight up
and running again. I think my PC was perfectly adequate to run the
game, according to its own system requirements analyzer:&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;centered&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/jk-analyzer.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/jk-analyzer.jpg&amp;quot; alt=&amp;quot;Analyzer&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;242&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Though it was incorrect about the &amp;quot;Windows 95&amp;quot; part.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;Thankfully, a kind soul rewrote the 16-bit installer (&amp;lt;a href=&amp;quot;https://code.google.com/p/starwarsjediknightaltinstall/&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;) so,
if you happen to have the Jedi Knight CDs on hand, you can actually
install it on a 64-bit Windows (virtual) machine.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;centered&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/jk-screenshot.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/jk-screenshot.jpg&amp;quot; alt=&amp;quot;Cinematic Screenshot&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;132&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Ah, nostalgia.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;Getting any new level up and running is typically as simple as placing the .gob file in the EPISODES folder. So, of course, I loaded up my old creation. I definitely had a lot of fun as a kid.&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;columns&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/002.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/002.jpg&amp;quot; alt=&amp;quot;Screenshot 1&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Completely forgot about the in-game menu system (so you could bypass
the rather dry &amp;quot;Story&amp;quot; cutscene I included, among other things).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/007.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/007.jpg&amp;quot; alt=&amp;quot;Screenshot 2&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;A planetarium. On a star destroyer, for some reason.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/008.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/008.jpg&amp;quot; alt=&amp;quot;Screenshot 3&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The aforementioned zoo.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/011.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/011.jpg&amp;quot; alt=&amp;quot;Screenshot 4&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Oddly, I also included a kitchen. Complete with an oven you have to
crawl into to complete a mission objective.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/019.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/019.jpg&amp;quot; alt=&amp;quot;Screenshot 5&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The obligatory &amp;quot;dress up as the enemy to get through a checkpoint&amp;quot;
plot point.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/024.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/024.jpg&amp;quot; alt=&amp;quot;Screenshot 6&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;A sewer at the bottom of a detention center. Even star destroyers have
to take care of their waste somehow.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/027.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/027.jpg&amp;quot; alt=&amp;quot;Screenshot 7&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Grand Admiral Thrawn himself, wielding a phaser. And fairly deadly at
that--I died a dozen times or so before beating him.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;/img/posts/jk/035.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;/img/posts/jk/thumb/035.jpg&amp;quot; alt=&amp;quot;Screenshot 8&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;175&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Barney makes an appearance. And yes, you can obliterate him.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;While my handiwork hasn&amp;apos;t aged well (and neither has JK, for that
matter), I&amp;apos;ve placed the entire monstrosity on my github for
posterity&amp;apos;s sake: &amp;lt;a href=&amp;quot;https://github.com/malloc47/return-of-thrawn&amp;quot;&amp;gt;https://github.com/malloc47/return-of-thrawn&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Reflecting back, COG certainly wasn&amp;apos;t the most stretching or important
language I learned (by a long-shot), nor was building my level the
most disciplined software engineering project I&amp;apos;ve undertaken, but it
was one thing: it was enthralling enough to keep a kid hooked on
coding and building cool things. Before the era of web apps and mobile
apps, or code academies and khan academies, or Scratch and Alice, I
feel rather lucky to have stumbled on something that was
simultaneously fun and empowering. JK wasn&amp;apos;t just a game. It was an
ecosystem. It was an IDE. And it was fun.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/import-links-into-google-plus-as-1s/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/import-links-into-google-plus-as-1s/"/>
    <title>Import Links into Google Plus as +1s</title>
    <updated>2012-03-24T22:32:08Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;I&amp;apos;ve been accumulating helpful and interesting articles for a number
of years now. At first, they existed solely as starred articles in
Google Reader. Eventually, I migrated to
&amp;lt;a href=&amp;quot;https://delicious.com/&amp;quot;&amp;gt;Delicious&amp;lt;/a&amp;gt;, and finally to
&amp;lt;a href=&amp;quot;https://www.diigo.com&amp;quot;&amp;gt;diigo&amp;lt;/a&amp;gt;. While diigo has served me well, I
finally decided to consolidate services and begin using Google&amp;apos;s +1
feature, as it is fairly ubiquitous and is associated with an account
I am already logged into (and appears nicely on my Google+ profile).&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;While Google&amp;apos;s Takeout is very useful on the exporting front (a factor
I consciously consider before migrating to any system), I&amp;apos;ve never run
across a good way to import a list of links as +1s on my Google+
profile. So here&amp;apos;s what I came up with last night:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;bash&amp;quot;&amp;gt;#!/bin/sh
echo &amp;amp;quot;&amp;amp;lt;html&amp;amp;gt;&amp;amp;lt;head&amp;amp;gt;&amp;amp;quot; &amp;amp;gt; page.html
echo &amp;amp;quot;&amp;amp;lt;script type=\&amp;amp;quot;text/javascript\&amp;amp;quot; src=\&amp;amp;quot;https://apis.google.com/js/plusone.js\&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; page.html
echo &amp;amp;quot;&amp;amp;lt;/head&amp;amp;gt;&amp;amp;lt;body&amp;amp;gt;&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; page.html
grep -o http[^\&amp;amp;quot;\)\&amp;apos;]* $1 | xargs -I{} echo &amp;amp;quot;&amp;amp;lt;g:plusone href=\&amp;amp;quot;{}\&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/g:plusone&amp;amp;gt;&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; page.html
echo &amp;amp;quot;&amp;amp;lt;/body&amp;amp;gt;&amp;amp;lt;/html&amp;amp;gt;&amp;amp;quot; &amp;amp;gt;&amp;amp;gt; page.html
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Since diigo will happily let you export in a variety of formats, I
chose the csv file. My goal was simply to create a webpage with the
links and the +1 button next to each. The process of clicking the
buttons themselves could be automated, but I decided to manually click
on the buttons, since I wanted to vet the links I transferred. The
very simple (read: not iron-clad) regex (&amp;lt;code&amp;gt;http[^\&amp;amp;quot;\)\&amp;apos;]*&amp;lt;/code&amp;gt;) is used to
pull out the links. It looks for an instance of a string &amp;amp;quot;http&amp;amp;quot; and
then continues grabbing characters until it hits a quote. It should
work in a number of contexts, aside from just CSV files. &amp;lt;code&amp;gt;xargs&amp;lt;/code&amp;gt;
kindly loops over all of these addresses and outputs each in HTML
form. The rest of the script just adds the usual HTML boilerplate, as
well as the +1 script necessary for the buttons to work.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;One more wrinkle: the latest crop of browsers sandbox what javascript
is allowed to do to the local filesystem (and rightfully so), so you
will need to upload the generated page to a non-local path (or simply
copy and paste it into a website that will let you edit html
live). Once you do, just click on all the +1 buttons everywhere, and
your links will be +1&amp;apos;d accordingly.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Have a &amp;lt;a href=&amp;quot;https://plus.google.com/u/0/113712188424853568731/plusones&amp;quot;&amp;gt;look&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/man-page-readability/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/man-page-readability/"/>
    <title>Man Page Readability</title>
    <updated>2012-03-24T22:32:08Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;Man pages are one of the staples of a healthy *nix diet, but having
grown up with them, it didn&amp;apos;t occur to me until recently to wonder how
readable they really are. The de facto standard for readability
has--for better or worse--converged to the &amp;lt;a href=&amp;quot;https://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_test&amp;quot;&amp;gt;Fleschâ€“Kincaid&amp;lt;/a&amp;gt; test,
which (a particular variant) ranks readability as a &amp;amp;quot;grade level,&amp;amp;quot;
roughly corresponding to an American school grade. Getting a
readability score for a manpage is as simple as piping our man page to
the GNU &amp;lt;em&amp;gt;style&amp;lt;/em&amp;gt; program (not installed on many distros, I discovered,
and typically available in the &amp;amp;quot;diction&amp;amp;quot; package).&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;gt; man /usr/share/man/man1/git.1.gz | style
readability grades:
        Kincaid: 7.0
        ARI: 4.4
        Coleman-Liau: 4.0
        ...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Notice that man can read in the (tarzipped) man source file (typically
located in &amp;lt;code&amp;gt;/usr/share/man/man?&amp;lt;/code&amp;gt; folders) rather than having to type
the executable name.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Since we&amp;apos;re only concerned with the Kincaid score, we can apply a
smattering of grep+awk to extract it.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;man /usr/share/man/man1/git.1.gz | style | grep Kincaid | awk &amp;apos;{print $2&amp;apos;}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;And finally, looping over all the installed man pages (+sed to trim
out short sentences, headers, etc.) gives us one big file, from which
we can get readability statistics.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;for i in `ls -d -1 /usr/share/man/man?/*` ; do echo -n &amp;amp;quot;$i &amp;amp;quot; ; man $i | tr &amp;apos;\n&amp;apos; &amp;apos; &amp;apos; | sed &amp;apos;s/\./\.\n/g&amp;apos; | sed -e &amp;apos;s/^[ \t]*//&amp;apos; | sed &amp;apos;/.\{3\}/!d&amp;apos; | grep Kincaid | awk &amp;apos;{print $2}&amp;apos; ; done &amp;amp;gt; ~/flesch-kincaid
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;More awk magic will give us an average and standard deviation.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;gt; awk &amp;apos;{avg+=$2} END {print avg/NR}&amp;apos; ~/flesch-kincaid
9.08134
&amp;amp;gt; awk &amp;apos;{sum+=$2; sumsq+=$2*$2} END {print sqrt(sumsq/NR - (sum/NR)**2)}&amp;apos; ~/flesch-kincaid
10.3857
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Perhaps surprisingly, the average readability of the man pages on my
machine is below the college level. More unexpectedly, the standard
deviation is very high, indicating that there&amp;apos;s a wide range of
readability from one man page to another. The page with the most
absurdly large readability score&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;grep `awk &amp;apos;$2&amp;amp;gt;m{m=$2}END{print m}&amp;apos; ~/flesch-kincaid` ~/flesch-kincaid
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;consist almost entirely of code and API documentation.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Of course, this does not take into account a myriad of confounding
factors: some non-English language pages crept into the list, which
kick out bogus scores by the Fleschâ€“Kincaid metric, man pages have
non-standard formatting (e.g. command switches) which aren&amp;apos;t
considered in the metric, etc. But knowing the general (or at least
average) education level required to comprehend man pages is worth
considering as more mainstream distributions bring with them an influx
of younger and less experienced users.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
  <entry>
    <id>https://www.malloc47.com/vim-to-emacs/</id>
    <link type="text/html" rel="alternate" href="https://www.malloc47.com/vim-to-emacs/"/>
    <title>vim -&gt; emacs</title>
    <updated>2019-03-12T02:22:04Z</updated>
    <author>
      <name>Jarrell Waggoner</name>
    </author>
    <content type="html">&amp;lt;p&amp;gt;After having grown up in the terminal with vim at my side, I&amp;apos;ve been transitioning to back to emacs. There&amp;apos;s no shortage of guides for making the leap, but there&amp;apos;s a number of features in vim that operate very differently in emacs, or do not map cleanly to a single feature. There&amp;apos;s nothing like not knowing how to get that &amp;lt;em&amp;gt;one&amp;lt;/em&amp;gt; feature you rely on when making the vim-&amp;amp;gt;emacs leap to make you want to run back to familiar territory. Here&amp;apos;s a few of the discoveries I&amp;apos;ve made along the way.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;dd -&amp;amp;gt; C-Shift-Backspace
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;C-k&amp;lt;/strong&amp;gt; is more often cited as the analog for &amp;lt;strong&amp;gt;dd&amp;lt;/strong&amp;gt; (and it is indeed more flexible in many situations), but as far as raw functionality is concerned, sometimes you just want the current line to go away, regardless of where the cursor is. Unfortunately, the** C-Shift-Backspace** keybinding may not be triggered when you&amp;apos;re running emacs in a screen or xterm (emacs -nw), but for the majority of standard emacs use, it&amp;apos;s a feature-compatible substitute.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;% -&amp;amp;gt; C-M-n, C-M-p
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Traversing pairs of grouping characters (e.g. (), [], {}, etc.) with vim&amp;apos;s % key is invaluable, but emacs not only replicates this feature, but adds a few new bits of functionality too. In general &amp;lt;strong&amp;gt;C-n&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;C-p&amp;lt;/strong&amp;gt; will traverse to the next or previous line, respectively, but &amp;lt;strong&amp;gt;C-M-n&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;C-M-p&amp;lt;/strong&amp;gt; will traverse forward or backward over the current &amp;lt;em&amp;gt;list&amp;lt;/em&amp;gt;. Since emacs has a major mode related to most languages you could find yourself working in (and if not, it&amp;apos;s not difficult to find or make one) that will do a rudimentary parse of the code into proper tokens, &amp;lt;strong&amp;gt;C-M-n&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;C-M-p&amp;lt;/strong&amp;gt; can intelligently jump to the beginning or end of parenthetical structures, words, or blocks with equal effectiveness. As a bonus, you also get &amp;lt;strong&amp;gt;C-M-d&amp;lt;/strong&amp;gt; (if your window manager hasn&amp;apos;t stolen that keybinding) and &amp;lt;strong&amp;gt;C-M-u&amp;lt;/strong&amp;gt; that go down or up (respectively) in the current structure---i.e., &amp;lt;strong&amp;gt;C-M-d&amp;lt;/strong&amp;gt; will place the cursor inside the parenthetical statement, ready to iterate over the items inside the parentheses with &amp;lt;strong&amp;gt;C-M-n&amp;lt;/strong&amp;gt;, while &amp;lt;strong&amp;gt;C-M-u&amp;lt;/strong&amp;gt; will place the cursor at the beginning of the parenthesis or block structure enclosing the cursor. Check the major mode you are in for even more context-sensitive commands (e.g., &amp;lt;strong&amp;gt;M-a&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;M-e&amp;lt;/strong&amp;gt; to go the beginning or ending of a statement in the C++ major mode). Another instance where it &amp;lt;em&amp;gt;seems&amp;lt;/em&amp;gt; like emacs adds overhead to the preciously minimalistic vim keybindings, but having two keys instead of one adds immeasurable navigational flexibility.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;f, F, t, T -&amp;amp;gt; C-s, C-r
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This may not be immediately intuitive, but the best mapping for vim&amp;apos;s nifty &amp;amp;quot;forward (or backward) to character&amp;amp;quot; feature is emacs&amp;apos;s standard search function. While, yes, the concession is that it requires three keystrokes (you must press enter after searching in emacs to position the cursor) instead of one, you get the same functionality, with the added benefit that you can search more than one character easily, and you don&amp;apos;t have to retype the character you want to jump to, as you would in vim.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[n]gg, :[n] -&amp;amp;gt; M-g g
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Though emacs integrates so well into most REPLs that you don&amp;apos;t often need to jump to specific line numbers manually, it&amp;apos;s still trivial to hop to specific line numbers with ease. Again, you&amp;apos;re sacrificing more keystrokes but, as with everything in emacs, you can remap anything you use often. Alternately, consider using the faster &amp;lt;strong&amp;gt;C-[n] M-g g&amp;lt;/strong&amp;gt; variant to prepend the line number instead of having to specify it (and hit enter) in the mini-buffer.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;quot;[register]p -&amp;amp;gt; C-y M-y
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The kill ring in emacs isn&amp;apos;t remotely complex, so it&amp;apos;s hardly worth mentioning except that it varies greatly from vim&amp;apos;s model of using registers to store yanked text. Instead of having to specify a register, as you do in vim, you simply paste whatever text happens to be in the ring into your document/code with &amp;lt;strong&amp;gt;C-y&amp;lt;/strong&amp;gt;, then loop through the various yanks with &amp;lt;strong&amp;gt;M-y&amp;lt;/strong&amp;gt;. Coming from a vim world, where every yank requires a register that contains only one snippet of text, the value of having yanks (or kills) you can scroll through (in the exact context you wish to paste them) is quite clear (and can actually result in fewer keystrokes for complicated yanks). As a bonus, only having to use &amp;lt;strong&amp;gt;C-w&amp;lt;/strong&amp;gt; or &amp;lt;strong&amp;gt;M-w&amp;lt;/strong&amp;gt; to yank text requires fewer keystrokes than having to use &amp;lt;strong&amp;gt;&amp;amp;quot;[reg]y&amp;lt;/strong&amp;gt; in vim too.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;q[register] ... q -&amp;amp;gt; C-x ( ... C-x ) M-x name-last-kbd-macro [name]
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;The only surface difference between vim and emacs for keyboard macros is that vim assigns keyboard macros to a register by default, but emacs requires &amp;lt;strong&amp;gt;M-x name-last-kbd-macro&amp;lt;/strong&amp;gt; to cache more than one macro at a time. The difference becomes more stark once you explore multiple macros, as you can apply a named keyboard macro by using &amp;lt;strong&amp;gt;M-x [name]&amp;lt;/strong&amp;gt;, since emacs saves the keyboard macro as a standard emacs command. As a bonus you can use the &amp;lt;strong&amp;gt;M-x insert-kbd-macro&amp;lt;/strong&amp;gt; to save the macro to your &amp;lt;em&amp;gt;.emacs&amp;lt;/em&amp;gt; file for future use.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;u, C-r -&amp;amp;gt; C-/
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;This is another emacs feature that&amp;apos;s very simple to understand, but where vim logic may trip you up. Most vim-&amp;amp;gt;emacs guides will clue you in that vim&amp;apos;s &amp;lt;strong&amp;gt;u&amp;lt;/strong&amp;gt; maps to emacs &amp;lt;strong&amp;gt;C-/&amp;lt;/strong&amp;gt; (&amp;lt;strong&amp;gt;C-_&amp;lt;/strong&amp;gt; or &amp;lt;strong&amp;gt;C-x u&amp;lt;/strong&amp;gt;, but those are more of a hassle), which is indeed correct. But the underlying &amp;amp;quot;redo&amp;amp;quot; logic is a bit different. Instead of vim&amp;apos;s separate &amp;lt;strong&amp;gt;C-r&amp;lt;/strong&amp;gt; redo command, emacs lets you &amp;amp;quot;undo your undos&amp;amp;quot; (again, think yank ring). So after a series of consecutive **C-/**s, all you need do is interrupt the sequence with a command that does not produce any undo history (I typically use a movement command like &amp;lt;strong&amp;gt;C-f&amp;lt;/strong&amp;gt;), and then use &amp;lt;strong&amp;gt;C-/&amp;lt;/strong&amp;gt; again, which will then, essentially, have become a &amp;amp;quot;redo&amp;amp;quot; command. This will become second nature quickly, but it&amp;apos;s a very different model from the inferior method used by vim (and a large number of other editors).&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;: -&amp;amp;gt; M-:, M-x
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Only thing worth mentioning here is the difference between executing direct elisp code (&amp;lt;strong&amp;gt;M-:&amp;lt;/strong&amp;gt;) and emacs commands (&amp;lt;strong&amp;gt;M-x&amp;lt;/strong&amp;gt;), which is not a distinction that vim has to make.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;:tabn, gf -&amp;amp;gt; C-x b
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Vim actually does allow for &amp;amp;quot;hidden&amp;amp;quot; buffers, so it can operate in a very emacsish way, if desired, but it a rarely-used feature; one that emacs adopts by default. Emacs doesn&amp;apos;t have &amp;amp;quot;tabs&amp;amp;quot; to switch between, per se, but the way it handles buffers is vastly more powerful than any tab or hidden buffer in vim, minus the &amp;amp;quot;tab&amp;amp;quot; aesthetic (and ido-mode or &amp;lt;strong&amp;gt;C-x C-b&amp;lt;/strong&amp;gt; is more than capable of providing a list if that is what is needed).&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;Screen Line Movement -&amp;amp;gt; Logical Line Movement
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;Emacs&amp;apos;s &amp;lt;strong&amp;gt;C-n&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;C-p&amp;lt;/strong&amp;gt; move over screen lines (the line breaks you see on the screen) by default, while vim&amp;apos;s &amp;lt;strong&amp;gt;j&amp;lt;/strong&amp;gt;,&amp;lt;strong&amp;gt;k&amp;lt;/strong&amp;gt; moves over logical lines (line breaks that are actually in the file). While vim&amp;apos;s logical line movement can cause problems with long lines (you have to use &amp;lt;strong&amp;gt;gj&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;gk&amp;lt;/strong&amp;gt; to switch over to screen lines), you can switch emacs to logical line movement, if you prefer it, with&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;(setp line-move-visual nil)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;which can be easily entered with &amp;lt;strong&amp;gt;M-:&amp;lt;/strong&amp;gt; in emacs to try it out, or added to your &amp;lt;code&amp;gt;.emacs&amp;lt;/code&amp;gt; file to save the setting.&amp;lt;/p&amp;gt;
</content>
  </entry>
  
</feed>
